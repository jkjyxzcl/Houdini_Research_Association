{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"graph TB Start(\u5f00\u59cb) --> Open[\u6253\u5f00\u51b0\u7bb1\u95e8] Open --> Put[\u628a\u5927\u8c61\u653e\u8fdb\u53bb] Put[\u628a\u5927\u8c61\u653e\u8fdb\u53bb] --> IsFit{\"\u51b0\u7bb1\u5c0f\u4e0d\u5c0f\uff1f\"} IsFit -->|\u4e0d\u5c0f| Close[\u628a\u51b0\u7bb1\u95e8\u5173\u4e0a] Close --> End(\u7ed3\u675f) IsFit -->|\u5c0f| Change[\u6362\u4e2a\u5927\u51b0\u7bb1] Change --> Open","title":"\u9996\u9875"},{"location":"about/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"about/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"about/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"about/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"c4d_abc_mb/","text":"abc\u8fd0\u52a8\u6a21\u7cca\u6e32\u67d3 \u6d4b\u8bd5\u7248\u672c\uff0choudini18.5 , c4d r21 , redshift 3.0.50 \u5bfc\u5165abc \u6dfb\u52a0rs\u7269\u4f53\u6807\u7b7e abc\u53f3\u952e - redshift Tags - Redshift Object \u628a\u901f\u5ea60 1 2 \u5206\u522b\u62d6\u5230xyz\u91cc\u9762\uff0c\u91c7\u6837\u4ee5\u79d2\u4e3a\u5355\u4f4d \u6e32\u67d3\u8bbe\u7f6e \u6ce8\u610f\u6ce8\u610f\u6253\u5f00\u53d8\u5f62\u91c7\u6837 \u5173\u95ed\u89d2\u8272\u8fd0\u52a8\u6a21\u7cca","title":"abc\u8fd0\u52a8\u6a21\u7cca"},{"location":"c4d_abc_mb/#abc","text":"\u6d4b\u8bd5\u7248\u672c\uff0choudini18.5 , c4d r21 , redshift 3.0.50","title":"abc\u8fd0\u52a8\u6a21\u7cca\u6e32\u67d3"},{"location":"c4d_abc_mb/#abc_1","text":"","title":"\u5bfc\u5165abc"},{"location":"c4d_abc_mb/#rs","text":"abc\u53f3\u952e - redshift Tags - Redshift Object \u628a\u901f\u5ea60 1 2 \u5206\u522b\u62d6\u5230xyz\u91cc\u9762\uff0c\u91c7\u6837\u4ee5\u79d2\u4e3a\u5355\u4f4d","title":"\u6dfb\u52a0rs\u7269\u4f53\u6807\u7b7e"},{"location":"c4d_abc_mb/#_1","text":"\u6ce8\u610f\u6ce8\u610f\u6253\u5f00\u53d8\u5f62\u91c7\u6837","title":"\u6e32\u67d3\u8bbe\u7f6e"},{"location":"c4d_abc_mb/#_2","text":"","title":"\u5173\u95ed\u89d2\u8272\u8fd0\u52a8\u6a21\u7cca"},{"location":"c4d_vdb/","text":"VDB\u6e32\u67d3 \u7b80\u5355\u4ecb\u7ecd vdb\u662f\u4e00\u79cd\u4f53\u79ef\u6570\u636e\u7c7b\u578b\uff0c\u68a6\u5de5\u5382\u5f00\u53d1\u7684\u3002 vdb\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u4e00\u822c\u53eb\u4f5c \u573a\uff08field\uff09 \u6216\u8005 \u901a\u9053\uff08channel\uff09 \u6ce8\u610f\uff1a \u5728C4D\u4e2d\u5bfc\u5165\u4f53\u79ef\u540e\uff0c\u5982\u679cchannel\u4e3a\u7a7a\uff0c\u4f53\u79ef\u5c31\u662f\u6709\u95ee\u9898\u7684 \u5e38\u7528\u573a \u4e0d\u540c\u7684\u573a\u53ef\u4ee5\u7406\u89e3\u6210\u56fe\u7247\u7684RGB\u901a\u9053\uff0c\u8bb0\u5f55\u7684\u662f\u4e0d\u540c\u4fe1\u606f\u800c\u5df2\u3002\u53ea\u4e0d\u8fc7\u56fe\u7247\u7528\u7684\u4e8c\u7ef4\u5e73\u9762\u7684\u50cf\u7d20\u5757\u8bb0\u5f55\u989c\u8272\u4fe1\u606f\u3002VDB\u7528\u7684\u662f\u4e09\u7ef4\u7a7a\u95f4\u7684\u7acb\u4f53\u50cf\u7d20\u5757\u8bb0\u5f55\u4f53\u79ef\u4fe1\u606f\u3002 density \u5bc6\u5ea6\u573a \u2b50 \u4f53\u79ef\u7684\u539a\u5ea6\uff0cdensity\u7528\u4e8e\u6e32\u67d3\u70df\u96fe\u3002 flame \u706b\u7130\u573a temperature \u6e29\u5ea6\u573a flame\u548ctemperature\u7528\u4e8e\u6e32\u67d3\u706b\u548c\u7206\u70b8\u7684\u71c3\u70e7\u533a\u57df\uff0c\u6b63\u5e38\u5728\u6e32\u67d3\u7684\u65f6\u5019\u66f4\u591a\u7684\u4f1a\u9009\u62e9flame\u63a7\u5236\u706b\u7130\u7684\u81ea\u53d1\u5149\u533a\u57df vel \u77e2\u91cf\u901f\u5ea6\u573a \u4e3b\u8981\u7528\u4e8e\u6e32\u67d3\u70df\u96fe\u7684\u8fd0\u52a8\u6a21\u7cca\uff0c\u4e00\u822c\u70df\u96fe\u4e0d\u9700\u8981\u6e32\u67d3motion \u70df\u96fe\u6e32\u67d3 \u6d4b\u8bd5\u6587\u4ef6: bunny_cloud.vdb \u706f\u5149\u8bbe\u7f6e \u6e32\u67d3\u70df\u96fe\uff0c\u9700\u8981\u628a \u706f\u5149\u7684\u4f53\u79ef\u7167\u660e\u8bbe\u7f6e\u4e3a1 \u6750\u8d28 \u70df\u96fe\u6e32\u67d3\u4e00\u822c\u53ea\u9700\u8981density\u573a\uff0c\u521b\u5efaredshift\u7684 volume \u6750\u8d28\uff0c\u5728channel\u4e2d\u9009\u62e9 density \u6e32\u67d3\u70df\uff0c\u53ea\u9700\u8981\u5173\u6ce8 scatter\u6563\u5c04 \u548c absorption\u5438\u6536 scatter\u53ef\u4ee5\u7406\u89e3\u4e3a\u6f2b\u53cd\u5c04\uff0c\u8d8a\u5927\u8d8a\u4eae absorption\u53ef\u4ee5\u7406\u89e3\u4e3a\u900f\u660e\uff0c\u8d8a\u5927\u4f53\u79ef\u8d8a\u539a \u589e\u52a0scatter\u7cfb\u6570\u4f1a\u4f7f\u4f53\u79ef\u66f4\u4eae\u3002\u589e\u52a0absorption\u7cfb\u6570\u4f1a\u4f7f\u4f53\u79ef\u66f4\u4e0d\u900f\u660e\u3002\u4f53\u79ef\u8d8a\u4e0d\u900f\u660e\uff0c\u7a7f\u8fc7\u5b83\u7684\u5149\u5c31\u8d8a\u5c11\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u9ad8\u5438\u6536\u610f\u5473\u7740\u4f53\u79ef\u53d8\u6697\u3002 \u5982\u679c\u60f3\u4fdd\u6301\u76f8\u540c\u7684\u8fd1\u4f3c\u5f3a\u5ea6\uff0c\u5efa\u8bae\u540c\u65f6\u8c03\u6574scatter\u7cfb\u6570\u548cabsorption\u7cfb\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\u8c03\u8282\u65f6\u5019\uff0c\u540c\u52a0\u540c\u51cf\u3002 Scatter Tint \u6765\u8c03\u6574\u97f3\u91cf\u7684\u6574\u4f53\u989c\u8272 \u706b\u7130\u6e32\u67d3 \u6d4b\u8bd5\u6587\u4ef6: fire.vdb \u706f\u5149\u540c\u4e0a\u8bbe\u7f6e \u6750\u8d28 \u5982\u679c\u53ea\u6e32\u67d3\u706b\uff0c\u4e0d\u6e32\u67d3\u70df\uff0cscatter\u4e2d\u7684channel\u7a7a\u767d\u5c31\u884c\u3002 \u63a7\u5236\u706b\u7130\u5c31\u53ea\u9700\u8981\u628aflame\u6216\u8005temperature\u573a\u6dfb\u52a0\u5230 Emission\u81ea\u53d1\u5149 \u7684channel\u4e2d\u3002 scale \u63a7\u5236\u6574\u4f53\u4eae\u5ea6\uff0c ramp \u63a7\u5236\u989c\u8272\u8fc7\u5ea6 \u5bf9\u4e8e\u4f4e\u6e29\uff0c\u4f7f\u7528\u9ed1\u8272/\u7070\u8272 \u5bf9\u4e8e\u4e2d\u7b49\u6e29\u5ea6\uff0c\u4f7f\u7528\u7ea2\u8272 \u5bf9\u4e8e\u66f4\u9ad8\u7684\u6e29\u5ea6\uff0c\u8bf7\u4f7f\u7528\u9ec4\u8272/\u767d\u8272 \u5c0f\u6280\u5de7 \u4e0d\u7ba1\u662f\u70df\u6216\u8005\u706b\u7130\u5728\u8c03\u8282\u6750\u8d28\u62c9\u6e10\u53d8\u7684\u65f6\u5019\uff0c\u4e0d\u8fc7\u662f\u628a \u4e00\u5b9a\u8303\u56f4\u533a\u95f4\u7684\u503c\u6620\u5c04\u5230\u65b0\u7684\u8303\u56f4 \u8fd9\u91cc\u62ff\u5bc6\u5ea6\u4e3e\u4f8b\uff1a \u5982\u56fe\uff0c\u5047\u5982VDB\u4e2d\u5bc6\u5ea6\u7684\u8303\u56f4\u662f0-1\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a 0-1 \u5bf9\u5e94\u5230\u4e86 \u7d2b-\u84dd \uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u6700\u7406\u60f3\u7684\u3002 \u6ce8\u610f \u5728\u4e09\u7ef4\u5236\u4f5c\u4e2d\uff0cdensity\u6216\u8005flame\u573a\u7684\u5927\u5c0f\u8303\u56f4\u4e0d\u4e00\u5b9a\u521a\u597d\u90fd\u57280-1\u7684\u533a\u95f4\u8303\u56f4\uff0c\u5f80\u5f80density\u548cflame\u7684\u6700\u5927\u503c\u4f1a\u5927\u4e8e1\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u53ef\u4ee5\u5728\u6750\u8d28 Advanced \u6807\u7b7e\u4e2d\u4fee\u6539\u4e0b\u5bf9\u5e94\u573a\u7684\u6700\u5927\u503c\u3002 \u5728\u5bfc\u51faVDB\u7684\u65f6\u5019\u4f1a\u9644\u5e26\u4e00\u4e2acsv\u8868\u683c\uff0c\u8bb0\u5f55\u6709\u6211\u4eec\u7528\u5230\u7684density\uff0cflame\uff0ctemperature\u573a\u7684\u6700\u5927\u503c \u4e00\u822c\u5728 densuity remap \u7684 old max \u4fee\u6539\u6210\u8868\u91cc\u7684density\u6700\u5927\u503cX100 Emission remap \u7684 old max \u4fee\u6539\u6210\u8868\u91cc\u7684flame\u6700\u5927\u503c VDB\u8fd0\u52a8\u6a21\u7cca \u524d\u63d0\uff1a\u5bfc\u51fa\u7684VDB\u542b\u6709\u901f\u5ea6\u573a\uff0c\u76ee\u524d\u4e0d\u652f\u6301\u77e2\u91cf\u7684\u901f\u5ea6\u573a \u6e32\u67d3\u8bbe\u7f6e\u5f00\u542f VDB\u8bbe\u7f6e","title":"VDB\u6e32\u67d3"},{"location":"c4d_vdb/#vdb","text":"","title":"VDB\u6e32\u67d3"},{"location":"c4d_vdb/#_1","text":"vdb\u662f\u4e00\u79cd\u4f53\u79ef\u6570\u636e\u7c7b\u578b\uff0c\u68a6\u5de5\u5382\u5f00\u53d1\u7684\u3002 vdb\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u4e00\u822c\u53eb\u4f5c \u573a\uff08field\uff09 \u6216\u8005 \u901a\u9053\uff08channel\uff09 \u6ce8\u610f\uff1a \u5728C4D\u4e2d\u5bfc\u5165\u4f53\u79ef\u540e\uff0c\u5982\u679cchannel\u4e3a\u7a7a\uff0c\u4f53\u79ef\u5c31\u662f\u6709\u95ee\u9898\u7684","title":"\u7b80\u5355\u4ecb\u7ecd"},{"location":"c4d_vdb/#_2","text":"\u4e0d\u540c\u7684\u573a\u53ef\u4ee5\u7406\u89e3\u6210\u56fe\u7247\u7684RGB\u901a\u9053\uff0c\u8bb0\u5f55\u7684\u662f\u4e0d\u540c\u4fe1\u606f\u800c\u5df2\u3002\u53ea\u4e0d\u8fc7\u56fe\u7247\u7528\u7684\u4e8c\u7ef4\u5e73\u9762\u7684\u50cf\u7d20\u5757\u8bb0\u5f55\u989c\u8272\u4fe1\u606f\u3002VDB\u7528\u7684\u662f\u4e09\u7ef4\u7a7a\u95f4\u7684\u7acb\u4f53\u50cf\u7d20\u5757\u8bb0\u5f55\u4f53\u79ef\u4fe1\u606f\u3002","title":"\u5e38\u7528\u573a"},{"location":"c4d_vdb/#density","text":"\u4f53\u79ef\u7684\u539a\u5ea6\uff0cdensity\u7528\u4e8e\u6e32\u67d3\u70df\u96fe\u3002","title":"density \u5bc6\u5ea6\u573a \u2b50"},{"location":"c4d_vdb/#flame-temperature","text":"flame\u548ctemperature\u7528\u4e8e\u6e32\u67d3\u706b\u548c\u7206\u70b8\u7684\u71c3\u70e7\u533a\u57df\uff0c\u6b63\u5e38\u5728\u6e32\u67d3\u7684\u65f6\u5019\u66f4\u591a\u7684\u4f1a\u9009\u62e9flame\u63a7\u5236\u706b\u7130\u7684\u81ea\u53d1\u5149\u533a\u57df","title":"flame \u706b\u7130\u573a   temperature \u6e29\u5ea6\u573a"},{"location":"c4d_vdb/#vel","text":"\u4e3b\u8981\u7528\u4e8e\u6e32\u67d3\u70df\u96fe\u7684\u8fd0\u52a8\u6a21\u7cca\uff0c\u4e00\u822c\u70df\u96fe\u4e0d\u9700\u8981\u6e32\u67d3motion","title":"vel \u77e2\u91cf\u901f\u5ea6\u573a"},{"location":"c4d_vdb/#_3","text":"\u6d4b\u8bd5\u6587\u4ef6: bunny_cloud.vdb","title":"\u70df\u96fe\u6e32\u67d3"},{"location":"c4d_vdb/#_4","text":"\u6e32\u67d3\u70df\u96fe\uff0c\u9700\u8981\u628a \u706f\u5149\u7684\u4f53\u79ef\u7167\u660e\u8bbe\u7f6e\u4e3a1","title":"\u706f\u5149\u8bbe\u7f6e"},{"location":"c4d_vdb/#_5","text":"\u70df\u96fe\u6e32\u67d3\u4e00\u822c\u53ea\u9700\u8981density\u573a\uff0c\u521b\u5efaredshift\u7684 volume \u6750\u8d28\uff0c\u5728channel\u4e2d\u9009\u62e9 density \u6e32\u67d3\u70df\uff0c\u53ea\u9700\u8981\u5173\u6ce8 scatter\u6563\u5c04 \u548c absorption\u5438\u6536 scatter\u53ef\u4ee5\u7406\u89e3\u4e3a\u6f2b\u53cd\u5c04\uff0c\u8d8a\u5927\u8d8a\u4eae absorption\u53ef\u4ee5\u7406\u89e3\u4e3a\u900f\u660e\uff0c\u8d8a\u5927\u4f53\u79ef\u8d8a\u539a \u589e\u52a0scatter\u7cfb\u6570\u4f1a\u4f7f\u4f53\u79ef\u66f4\u4eae\u3002\u589e\u52a0absorption\u7cfb\u6570\u4f1a\u4f7f\u4f53\u79ef\u66f4\u4e0d\u900f\u660e\u3002\u4f53\u79ef\u8d8a\u4e0d\u900f\u660e\uff0c\u7a7f\u8fc7\u5b83\u7684\u5149\u5c31\u8d8a\u5c11\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u9ad8\u5438\u6536\u610f\u5473\u7740\u4f53\u79ef\u53d8\u6697\u3002 \u5982\u679c\u60f3\u4fdd\u6301\u76f8\u540c\u7684\u8fd1\u4f3c\u5f3a\u5ea6\uff0c\u5efa\u8bae\u540c\u65f6\u8c03\u6574scatter\u7cfb\u6570\u548cabsorption\u7cfb\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\u8c03\u8282\u65f6\u5019\uff0c\u540c\u52a0\u540c\u51cf\u3002 Scatter Tint \u6765\u8c03\u6574\u97f3\u91cf\u7684\u6574\u4f53\u989c\u8272","title":"\u6750\u8d28"},{"location":"c4d_vdb/#_6","text":"\u6d4b\u8bd5\u6587\u4ef6: fire.vdb \u706f\u5149\u540c\u4e0a\u8bbe\u7f6e","title":"\u706b\u7130\u6e32\u67d3"},{"location":"c4d_vdb/#_7","text":"\u5982\u679c\u53ea\u6e32\u67d3\u706b\uff0c\u4e0d\u6e32\u67d3\u70df\uff0cscatter\u4e2d\u7684channel\u7a7a\u767d\u5c31\u884c\u3002 \u63a7\u5236\u706b\u7130\u5c31\u53ea\u9700\u8981\u628aflame\u6216\u8005temperature\u573a\u6dfb\u52a0\u5230 Emission\u81ea\u53d1\u5149 \u7684channel\u4e2d\u3002 scale \u63a7\u5236\u6574\u4f53\u4eae\u5ea6\uff0c ramp \u63a7\u5236\u989c\u8272\u8fc7\u5ea6 \u5bf9\u4e8e\u4f4e\u6e29\uff0c\u4f7f\u7528\u9ed1\u8272/\u7070\u8272 \u5bf9\u4e8e\u4e2d\u7b49\u6e29\u5ea6\uff0c\u4f7f\u7528\u7ea2\u8272 \u5bf9\u4e8e\u66f4\u9ad8\u7684\u6e29\u5ea6\uff0c\u8bf7\u4f7f\u7528\u9ec4\u8272/\u767d\u8272","title":"\u6750\u8d28"},{"location":"c4d_vdb/#_8","text":"\u4e0d\u7ba1\u662f\u70df\u6216\u8005\u706b\u7130\u5728\u8c03\u8282\u6750\u8d28\u62c9\u6e10\u53d8\u7684\u65f6\u5019\uff0c\u4e0d\u8fc7\u662f\u628a \u4e00\u5b9a\u8303\u56f4\u533a\u95f4\u7684\u503c\u6620\u5c04\u5230\u65b0\u7684\u8303\u56f4 \u8fd9\u91cc\u62ff\u5bc6\u5ea6\u4e3e\u4f8b\uff1a \u5982\u56fe\uff0c\u5047\u5982VDB\u4e2d\u5bc6\u5ea6\u7684\u8303\u56f4\u662f0-1\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a 0-1 \u5bf9\u5e94\u5230\u4e86 \u7d2b-\u84dd \uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u6700\u7406\u60f3\u7684\u3002 \u6ce8\u610f \u5728\u4e09\u7ef4\u5236\u4f5c\u4e2d\uff0cdensity\u6216\u8005flame\u573a\u7684\u5927\u5c0f\u8303\u56f4\u4e0d\u4e00\u5b9a\u521a\u597d\u90fd\u57280-1\u7684\u533a\u95f4\u8303\u56f4\uff0c\u5f80\u5f80density\u548cflame\u7684\u6700\u5927\u503c\u4f1a\u5927\u4e8e1\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u53ef\u4ee5\u5728\u6750\u8d28 Advanced \u6807\u7b7e\u4e2d\u4fee\u6539\u4e0b\u5bf9\u5e94\u573a\u7684\u6700\u5927\u503c\u3002 \u5728\u5bfc\u51faVDB\u7684\u65f6\u5019\u4f1a\u9644\u5e26\u4e00\u4e2acsv\u8868\u683c\uff0c\u8bb0\u5f55\u6709\u6211\u4eec\u7528\u5230\u7684density\uff0cflame\uff0ctemperature\u573a\u7684\u6700\u5927\u503c \u4e00\u822c\u5728 densuity remap \u7684 old max \u4fee\u6539\u6210\u8868\u91cc\u7684density\u6700\u5927\u503cX100 Emission remap \u7684 old max \u4fee\u6539\u6210\u8868\u91cc\u7684flame\u6700\u5927\u503c","title":"\u5c0f\u6280\u5de7"},{"location":"c4d_vdb/#vdb_1","text":"\u524d\u63d0\uff1a\u5bfc\u51fa\u7684VDB\u542b\u6709\u901f\u5ea6\u573a\uff0c\u76ee\u524d\u4e0d\u652f\u6301\u77e2\u91cf\u7684\u901f\u5ea6\u573a","title":"VDB\u8fd0\u52a8\u6a21\u7cca"},{"location":"c4d_vdb/#_9","text":"","title":"\u6e32\u67d3\u8bbe\u7f6e\u5f00\u542f"},{"location":"c4d_vdb/#vdb_2","text":"","title":"VDB\u8bbe\u7f6e"},{"location":"hou_env/","text":"houdini env set # \u5916\u90e8\u7f16\u8f91\u5668 EDITOR = \"C:/Users/Administrator/AppData/Local/Programs/Microsoft VS Code/Code.exe\" # \u7b2c\u4e09\u65b9python\u5e93 PYTHONPATH = \"C:/Users/Administrator/AppData/Local/Programs/Python/Python37/Lib/site-packages\" # rs HOUDINI_DSO_ERROR = 2 PATH = \"C:/ProgramData/Redshift/bin;$PATH\" HOUDINI_PATH = \"C:/ProgramData/Redshift/Plugins/Houdini/${HOUDINI_VERSION};&\" # Solaris PXR_PLUGINPATH_NAME = \"C:/ProgramData/Redshift/Plugins/Solaris/${HOUDINI_VERSION};&\"","title":"houdini env"},{"location":"hou_env/#houdini-env-set","text":"# \u5916\u90e8\u7f16\u8f91\u5668 EDITOR = \"C:/Users/Administrator/AppData/Local/Programs/Microsoft VS Code/Code.exe\" # \u7b2c\u4e09\u65b9python\u5e93 PYTHONPATH = \"C:/Users/Administrator/AppData/Local/Programs/Python/Python37/Lib/site-packages\" # rs HOUDINI_DSO_ERROR = 2 PATH = \"C:/ProgramData/Redshift/bin;$PATH\" HOUDINI_PATH = \"C:/ProgramData/Redshift/Plugins/Houdini/${HOUDINI_VERSION};&\" # Solaris PXR_PLUGINPATH_NAME = \"C:/ProgramData/Redshift/Plugins/Solaris/${HOUDINI_VERSION};&\"","title":"houdini env set"},{"location":"hou_py/","text":"Code # ..\\Documents\\houdini18.5\\scripts\\python\\keysTool import hou import os import toolutils,nodesearch def rigHide(node): for child in node.children(): if 'rig' in child.name(): child.setDisplayFlag(0) break else: rigHide(child) def openFolder(): file_path = hou.getenv('HIP') # print(file_path) os.startfile(file_path) def createAbcNode(path, name): abcNode = hou.node('/obj/').createNode('alembicarchive',name.split('.')[0]) abcPath = os.path.join(path, name) abcNode.parm('fileName').set(abcPath) abcNode.parm('buildHierarchy').pressButton() return abcNode def abcBatchImport(): selectFolder = hou.ui.selectFile('$HIP/', file_type=hou.fileType.Directory) absHip = hou.getenv('HIP') # print(selectFolder) # print(absHip) absSelectFolder = selectFolder.replace('$HIP',absHip,1) # print(absSelectFolder) files = os.listdir(absSelectFolder) nullNode = hou.node('/obj/').createNode('null') nullNode.setDisplayFlag(0) nullNode.parm('scale').set(0.01) # nullNode.moveToGoodPosition() for file in files: # print(file) if file.endswith('.abc'): abcArchNode = createAbcNode(selectFolder, file) rigHide(abcArchNode) abcArchNode.setInput(0, nullNode) # abcArchNode.moveToGoodPosition() camNodes = toolutils.findAllChildNodesOfType(hou.node('/obj'),'cam',dorecurse=True) if len(camNodes)>0: for camNode in camNodes: camNode.parmTuple('res').set((1080,1080)) hou.node('/obj').layoutChildren() def cleanProj(): file_path = hou.getenv('HIP') folders = os.listdir(file_path) print(folders) def geoMerge(): geo = hou.selectedNodes() num = len(geo) res = hou.ui.readInput(\"Enter Name:\") tmpNodeName = \"Merge_\" + res[1] mergeGeo = hou.node(\"/obj\").createNode(\"geo\",tmpNodeName) mergeGeo.setColor(hou.Color((1.00, 0.98, 0.67))) mergeGeo.moveToGoodPosition() objMerge = mergeGeo.createNode(\"object_merge\") objMerge.parm(\"numobj\").set(num) objMerge.parm('xformtype').set(1) if num>0: for i in range(num): tmpName = \"objpath\" + str(i+1) tmpPath = geo[i].path() objMerge.parm(tmpName).set(tmpPath) # print tmpPath hou.ui.displayMessage(\"success!!!\") else : hou.ui.displayMessage(\"please select something!\") def cacheExport(): selNodes = hou.selectedNodes() tmp_color = hou.Color((.2, 0.63, 0)) cache_type_list = ['bgeo.sc', 'vdb', 'abc'] if len(selNodes) > 0: user_select_type = hou.ui.displayCustomConfirmation('@@@ Please Select Cache Type: @@@', buttons=('Bgeo', 'Vdb', 'Abc', '\u53d6\u6d88'), suppress=hou.confirmType.OverwriteFile) # print(cache_type_list[user_select_type]) if user_select_type == 3: exit else: selNode = selNodes[0] tmp_pos = selNode.position() # print tmp_pos parNode = selNode.parent() name_matcher = nodesearch.Name(\"OUT_GEO_cache\") tmp_match = name_matcher.nodes(parNode) if len(tmp_match)>0: tmpRop = hou.node(parNode.path() + \"/OUT_GEO_cache\") else: tmpRop = parNode.createNode(\"ropnet\",\"OUT_GEO_cache\") tmpRop.moveToGoodPosition() res = hou.ui.readInput(\"Enter Node Name :\") if user_select_type == 0: tmpNodeName = \"OUT_\" + res[1] tmpNull = parNode.createNode(\"null\",tmpNodeName) tmpNull.setInput(0,selNode) tmpNull.setPosition((tmp_pos[0],tmp_pos[1]-2)) tmpRopGeo = tmpRop.createNode(\"geometry\",tmpNodeName) tmpRopGeo.parm(\"trange\").set(1) tmpRopGeo.parm(\"soppath\").set('../../$OS') tmpsopoutput = \"$HIP/geo/$OS/$OS.$F4.\" + cache_type_list[user_select_type] tmpRopGeo.parm(\"sopoutput\").set(tmpsopoutput) # tmpRopGeo.parm(\"sopoutput\").set(tmpRopGeo_soppath) tmpRopGeo.moveToGoodPosition() p1 = tmpRopGeo.parm(\"sopoutput\") tmp_file = parNode.createNode(\"file\") tmp_file.setPosition((tmp_pos[0],tmp_pos[1]-4)) tmp_file.parm(\"file\").set(p1) tmp_file.parm(\"missingframe\").set(1) tmpRopGeo.setColor(tmp_color) tmpNull.setColor(tmp_color) tmp_file.setColor(tmp_color) elif user_select_type == 1: # \u7f13\u5b58\u6d41\u7a0b # \u521b\u5efavolumeresample\u8282\u70b9 tmpVolResample = parNode.createNode(\"volumeresample\") tmpVolResample.parm('group').set('@name=vel.*') tmpVolResample.parm('scale').set(.5) tmpVolResample.setInput(0,selNode) tmpVolResample.setPosition((tmp_pos[0],tmp_pos[1]-2)) # \u521b\u5efaConvertVDB\u8282\u70b9 tmpConvertVDB = parNode.createNode(\"convertvdb\") tmpConvertVDB.parm('conversion').set(1) tmpConvertVDB.setInput(0,tmpVolResample) tmpConvertVDB.setPosition((tmp_pos[0],tmp_pos[1]-4)) # \u521b\u5efatransform\u8282\u70b9 tmpTrans = parNode.createNode(\"xform\") tmpTrans.parm('scale').set(100) tmpTrans.setInput(0,tmpConvertVDB) tmpTrans.setPosition((tmp_pos[0],tmp_pos[1]-6)) # \u521b\u5efavolumewrangle\u8282\u70b9 tmpVolWrangle = parNode.createNode(\"volumewrangle\") tmpVolWrangle.parm('snippet').set('@density *= 1; \\nv@vel *= 1;') tmpVolWrangle.setInput(0,tmpTrans) tmpVolWrangle.setPosition((tmp_pos[0],tmp_pos[1]-8)) # \u521b\u5efapyropostprocess\u8282\u70b9 tmpPyroPostProcess = parNode.createNode(\"pyropostprocess\") tmpPyroPostProcess.parm('dolook').set(0) tmpPyroPostProcess.setInput(0,tmpVolWrangle) tmpPyroPostProcess.setPosition((tmp_pos[0],tmp_pos[1]-10)) # \u521b\u5efaNULL\u8282\u70b9 tmpNodeName = \"VDB_\" + res[1] tmpNull = parNode.createNode(\"null\",tmpNodeName) tmpNull.setInput(0,tmpPyroPostProcess) tmpNull.setPosition((tmp_pos[0],tmp_pos[1]-12)) # \u521b\u5efaROP \u5199VDB\u7f13\u5b58\u8282\u70b9 tmpRopGeo = tmpRop.createNode(\"geometry\",tmpNodeName) tmpRopGeo.parm(\"trange\").set(1) tmpRopGeo.parm(\"soppath\").set('../../$OS') tmpsopoutput = \"$HIP/Cache/$OS/$OS.$F4.\" + cache_type_list[user_select_type] tmpRopGeo.parm(\"sopoutput\").set(tmpsopoutput) # tmpRopGeo.parm(\"sopoutput\").set(tmpRopGeo_soppath) labs::csv_exporter p1 = tmpRopGeo.parm(\"sopoutput\") # \u521b\u5efa\u8bfb\u7f13\u5b58\u8282\u70b9 tmp_file = parNode.createNode(\"file\") tmp_file.setPosition((tmp_pos[0],tmp_pos[1]-14)) tmp_file.parm(\"file\").set(p1) tmp_file.parm(\"missingframe\").set(1) # Csv\u6d41\u7a0b tmpPromote = parNode.createNode(\"attribpromote\") tmpPromote.parm('inname').set('name minimum maximum') tmpPromote.parm('inclass').set(1) tmpPromote.parm('method').set(8) tmpPromote.setInput(0,tmpPyroPostProcess) tmpPromote.setPosition((tmp_pos[0]+2,tmp_pos[1]-12)) tmpCsvNodeName = \"VDB_\" + res[1] + '_iofo' tmpCsvNull = parNode.createNode(\"null\",tmpCsvNodeName) tmpCsvNull.setInput(0,tmpPromote) tmpCsvNull.setPosition((tmp_pos[0]+2,tmp_pos[1]-14)) tmpRopCsv = tmpRop.createNode('labs::csv_exporter', tmpCsvNodeName) tmpRelCsvPath = '../../'+tmpCsvNodeName tmpRopCsv.parm('export_node').set(tmpRelCsvPath) tmpRopCsv.parm('csv_path').set(\"$HIP/Cache/$OS.csv\") tmpRopCsv.parm('bFilteredExport').set(1) tmpRopCsv.parm('mAttributes').set(3) tmpRopCsv.parm('sAttribute1').set('name') tmpRopCsv.parm('sAttribute2').set('minimum') tmpRopCsv.parm('sAttribute3').set('maximum') # \u540e\u5904\u7406 tmpRopGeo.moveToGoodPosition() tmpRopCsv.moveToGoodPosition() tmpRopGeo.setColor(tmp_color) tmpNull.setColor(tmp_color) tmpCsvNull.setColor(tmp_color) tmp_file.setColor(tmp_color) elif user_select_type == 2: # \u7f13\u5b58\u6d41\u7a0b # \u521b\u5efaConvert\u8282\u70b9 abcConvert = parNode.createNode(\"convert\") abcConvert.setInput(0,selNode) abcConvert.setPosition((tmp_pos[0],tmp_pos[1]-2)) # \u521b\u5efatransform\u8282\u70b9 abcTrans = parNode.createNode(\"xform\") abcTrans.parm('scale').set(100) abcTrans.setInput(0,abcConvert) abcTrans.setPosition((tmp_pos[0],tmp_pos[1]-4)) # \u521b\u5efaattribwrangle\u8282\u70b9 abcWrangle = parNode.createNode(\"attribwrangle\") abcWrangle.parm('class').set(1) abcWrangleTmp = 's@path = \"/{}/{}\";'.format(res[1] ,res[1] ) abcWrangle.parm('snippet').set(abcWrangleTmp) abcWrangle.setInput(0,abcTrans) abcWrangle.setPosition((tmp_pos[0],tmp_pos[1]-6)) # \u521b\u5efaattribdelete\u8282\u70b9 abcClean = parNode.createNode(\"clean\") abcClean.parm('dodelattribs').set(1) abcClean.parm('dodelgroups').set(1) abcClean.parm('delattribs').set('* ^v ^path ^speed ^vorticity ^mask ^uv') abcClean.parm('delgroups').set('* ^inside ^outside') abcClean.setInput(0,abcWrangle) abcClean.setPosition((tmp_pos[0],tmp_pos[1]-8)) # \u521b\u5efaNULL\u8282\u70b9 abcNodeName = \"ABC_\" + res[1] abcNull = parNode.createNode(\"null\",abcNodeName) abcNull.setInput(0,abcClean) abcNull.setPosition((tmp_pos[0],tmp_pos[1]-10)) # \u521b\u5efaROP \u5199VDB\u7f13\u5b58\u8282\u70b9 abcRopGeo = tmpRop.createNode(\"alembic\",abcNodeName) abcRopGeo.parm(\"trange\").set(1) abcRopGeo.parm(\"use_sop_path\").set(1) abcRopGeo.parm(\"build_from_path\").set(1) abcRopGeo.parm(\"sop_path\").set('../../$OS') abcsopoutput = \"$HIP/Cache/$OS/$OS.\" + cache_type_list[user_select_type] abcRopGeo.parm(\"filename\").set(abcsopoutput) p1 = abcRopGeo.parm(\"filename\") # \u521b\u5efa\u8bfb\u7f13\u5b58\u8282\u70b9 tmp_file = parNode.createNode(\"alembic\") tmp_file.setPosition((tmp_pos[0],tmp_pos[1]-12)) tmp_file.parm(\"fileName\").set(p1) tmp_file.parm(\"missingfile\").set(1) # Csv\u6d41\u7a0b tmpPromote = parNode.createNode(\"attribpromote\") tmpPromote.parm('inname').set('speed vorticity') tmpPromote.parm('outclass').set(0) tmpPromote.parm('method').set(0) tmpPromote.setInput(0,abcTrans) tmpPromote.setPosition((tmp_pos[0]+2,tmp_pos[1]-6)) tmpPromote2 = parNode.createNode(\"attribpromote\") tmpPromote2.parm('inname').set('speed vorticity') tmpPromote2.parm('inclass').set(0) tmpPromote2.parm('method').set(0) tmpPromote2.setInput(0,tmpPromote) tmpPromote2.setPosition((tmp_pos[0]+2,tmp_pos[1]-8)) abcPack = parNode.createNode(\"pack\") abcPack.parm('transfer_attributes').set('speed vorticity') abcPack.setInput(0,tmpPromote2) abcPack.setPosition((tmp_pos[0]+2,tmp_pos[1]-10)) tmpCsvNodeName = abcNodeName + '_iofo' tmpCsvNull = parNode.createNode(\"null\",tmpCsvNodeName) tmpCsvNull.setInput(0,abcPack) tmpCsvNull.setPosition((tmp_pos[0]+2,tmp_pos[1]-12)) tmpRopCsv = tmpRop.createNode('labs::csv_exporter', tmpCsvNodeName) tmpRelCsvPath = '../../'+tmpCsvNodeName tmpRopCsv.parm('export_node').set(tmpRelCsvPath) tmpRopCsv.parm('csv_path').set(\"$HIP/Cache/$OS.csv\") tmpRopCsv.parm('bFilteredExport').set(1) tmpRopCsv.parm('mAttributes').set(2) tmpRopCsv.parm('sAttribute1').set('vorticity') tmpRopCsv.parm('sAttribute2').set('speed') # \u540e\u5904\u7406 abcRopGeo.moveToGoodPosition() tmpRopCsv.moveToGoodPosition() abcRopGeo.setColor(tmp_color) abcNull.setColor(tmp_color) tmpCsvNull.setColor(tmp_color) tmp_file.setColor(tmp_color) else: hou.ui.displayMessage(\"@@@ please select a NODE @@@\")","title":"pycode"},{"location":"hou_py/#code","text":"# ..\\Documents\\houdini18.5\\scripts\\python\\keysTool import hou import os import toolutils,nodesearch def rigHide(node): for child in node.children(): if 'rig' in child.name(): child.setDisplayFlag(0) break else: rigHide(child) def openFolder(): file_path = hou.getenv('HIP') # print(file_path) os.startfile(file_path) def createAbcNode(path, name): abcNode = hou.node('/obj/').createNode('alembicarchive',name.split('.')[0]) abcPath = os.path.join(path, name) abcNode.parm('fileName').set(abcPath) abcNode.parm('buildHierarchy').pressButton() return abcNode def abcBatchImport(): selectFolder = hou.ui.selectFile('$HIP/', file_type=hou.fileType.Directory) absHip = hou.getenv('HIP') # print(selectFolder) # print(absHip) absSelectFolder = selectFolder.replace('$HIP',absHip,1) # print(absSelectFolder) files = os.listdir(absSelectFolder) nullNode = hou.node('/obj/').createNode('null') nullNode.setDisplayFlag(0) nullNode.parm('scale').set(0.01) # nullNode.moveToGoodPosition() for file in files: # print(file) if file.endswith('.abc'): abcArchNode = createAbcNode(selectFolder, file) rigHide(abcArchNode) abcArchNode.setInput(0, nullNode) # abcArchNode.moveToGoodPosition() camNodes = toolutils.findAllChildNodesOfType(hou.node('/obj'),'cam',dorecurse=True) if len(camNodes)>0: for camNode in camNodes: camNode.parmTuple('res').set((1080,1080)) hou.node('/obj').layoutChildren() def cleanProj(): file_path = hou.getenv('HIP') folders = os.listdir(file_path) print(folders) def geoMerge(): geo = hou.selectedNodes() num = len(geo) res = hou.ui.readInput(\"Enter Name:\") tmpNodeName = \"Merge_\" + res[1] mergeGeo = hou.node(\"/obj\").createNode(\"geo\",tmpNodeName) mergeGeo.setColor(hou.Color((1.00, 0.98, 0.67))) mergeGeo.moveToGoodPosition() objMerge = mergeGeo.createNode(\"object_merge\") objMerge.parm(\"numobj\").set(num) objMerge.parm('xformtype').set(1) if num>0: for i in range(num): tmpName = \"objpath\" + str(i+1) tmpPath = geo[i].path() objMerge.parm(tmpName).set(tmpPath) # print tmpPath hou.ui.displayMessage(\"success!!!\") else : hou.ui.displayMessage(\"please select something!\") def cacheExport(): selNodes = hou.selectedNodes() tmp_color = hou.Color((.2, 0.63, 0)) cache_type_list = ['bgeo.sc', 'vdb', 'abc'] if len(selNodes) > 0: user_select_type = hou.ui.displayCustomConfirmation('@@@ Please Select Cache Type: @@@', buttons=('Bgeo', 'Vdb', 'Abc', '\u53d6\u6d88'), suppress=hou.confirmType.OverwriteFile) # print(cache_type_list[user_select_type]) if user_select_type == 3: exit else: selNode = selNodes[0] tmp_pos = selNode.position() # print tmp_pos parNode = selNode.parent() name_matcher = nodesearch.Name(\"OUT_GEO_cache\") tmp_match = name_matcher.nodes(parNode) if len(tmp_match)>0: tmpRop = hou.node(parNode.path() + \"/OUT_GEO_cache\") else: tmpRop = parNode.createNode(\"ropnet\",\"OUT_GEO_cache\") tmpRop.moveToGoodPosition() res = hou.ui.readInput(\"Enter Node Name :\") if user_select_type == 0: tmpNodeName = \"OUT_\" + res[1] tmpNull = parNode.createNode(\"null\",tmpNodeName) tmpNull.setInput(0,selNode) tmpNull.setPosition((tmp_pos[0],tmp_pos[1]-2)) tmpRopGeo = tmpRop.createNode(\"geometry\",tmpNodeName) tmpRopGeo.parm(\"trange\").set(1) tmpRopGeo.parm(\"soppath\").set('../../$OS') tmpsopoutput = \"$HIP/geo/$OS/$OS.$F4.\" + cache_type_list[user_select_type] tmpRopGeo.parm(\"sopoutput\").set(tmpsopoutput) # tmpRopGeo.parm(\"sopoutput\").set(tmpRopGeo_soppath) tmpRopGeo.moveToGoodPosition() p1 = tmpRopGeo.parm(\"sopoutput\") tmp_file = parNode.createNode(\"file\") tmp_file.setPosition((tmp_pos[0],tmp_pos[1]-4)) tmp_file.parm(\"file\").set(p1) tmp_file.parm(\"missingframe\").set(1) tmpRopGeo.setColor(tmp_color) tmpNull.setColor(tmp_color) tmp_file.setColor(tmp_color) elif user_select_type == 1: # \u7f13\u5b58\u6d41\u7a0b # \u521b\u5efavolumeresample\u8282\u70b9 tmpVolResample = parNode.createNode(\"volumeresample\") tmpVolResample.parm('group').set('@name=vel.*') tmpVolResample.parm('scale').set(.5) tmpVolResample.setInput(0,selNode) tmpVolResample.setPosition((tmp_pos[0],tmp_pos[1]-2)) # \u521b\u5efaConvertVDB\u8282\u70b9 tmpConvertVDB = parNode.createNode(\"convertvdb\") tmpConvertVDB.parm('conversion').set(1) tmpConvertVDB.setInput(0,tmpVolResample) tmpConvertVDB.setPosition((tmp_pos[0],tmp_pos[1]-4)) # \u521b\u5efatransform\u8282\u70b9 tmpTrans = parNode.createNode(\"xform\") tmpTrans.parm('scale').set(100) tmpTrans.setInput(0,tmpConvertVDB) tmpTrans.setPosition((tmp_pos[0],tmp_pos[1]-6)) # \u521b\u5efavolumewrangle\u8282\u70b9 tmpVolWrangle = parNode.createNode(\"volumewrangle\") tmpVolWrangle.parm('snippet').set('@density *= 1; \\nv@vel *= 1;') tmpVolWrangle.setInput(0,tmpTrans) tmpVolWrangle.setPosition((tmp_pos[0],tmp_pos[1]-8)) # \u521b\u5efapyropostprocess\u8282\u70b9 tmpPyroPostProcess = parNode.createNode(\"pyropostprocess\") tmpPyroPostProcess.parm('dolook').set(0) tmpPyroPostProcess.setInput(0,tmpVolWrangle) tmpPyroPostProcess.setPosition((tmp_pos[0],tmp_pos[1]-10)) # \u521b\u5efaNULL\u8282\u70b9 tmpNodeName = \"VDB_\" + res[1] tmpNull = parNode.createNode(\"null\",tmpNodeName) tmpNull.setInput(0,tmpPyroPostProcess) tmpNull.setPosition((tmp_pos[0],tmp_pos[1]-12)) # \u521b\u5efaROP \u5199VDB\u7f13\u5b58\u8282\u70b9 tmpRopGeo = tmpRop.createNode(\"geometry\",tmpNodeName) tmpRopGeo.parm(\"trange\").set(1) tmpRopGeo.parm(\"soppath\").set('../../$OS') tmpsopoutput = \"$HIP/Cache/$OS/$OS.$F4.\" + cache_type_list[user_select_type] tmpRopGeo.parm(\"sopoutput\").set(tmpsopoutput) # tmpRopGeo.parm(\"sopoutput\").set(tmpRopGeo_soppath) labs::csv_exporter p1 = tmpRopGeo.parm(\"sopoutput\") # \u521b\u5efa\u8bfb\u7f13\u5b58\u8282\u70b9 tmp_file = parNode.createNode(\"file\") tmp_file.setPosition((tmp_pos[0],tmp_pos[1]-14)) tmp_file.parm(\"file\").set(p1) tmp_file.parm(\"missingframe\").set(1) # Csv\u6d41\u7a0b tmpPromote = parNode.createNode(\"attribpromote\") tmpPromote.parm('inname').set('name minimum maximum') tmpPromote.parm('inclass').set(1) tmpPromote.parm('method').set(8) tmpPromote.setInput(0,tmpPyroPostProcess) tmpPromote.setPosition((tmp_pos[0]+2,tmp_pos[1]-12)) tmpCsvNodeName = \"VDB_\" + res[1] + '_iofo' tmpCsvNull = parNode.createNode(\"null\",tmpCsvNodeName) tmpCsvNull.setInput(0,tmpPromote) tmpCsvNull.setPosition((tmp_pos[0]+2,tmp_pos[1]-14)) tmpRopCsv = tmpRop.createNode('labs::csv_exporter', tmpCsvNodeName) tmpRelCsvPath = '../../'+tmpCsvNodeName tmpRopCsv.parm('export_node').set(tmpRelCsvPath) tmpRopCsv.parm('csv_path').set(\"$HIP/Cache/$OS.csv\") tmpRopCsv.parm('bFilteredExport').set(1) tmpRopCsv.parm('mAttributes').set(3) tmpRopCsv.parm('sAttribute1').set('name') tmpRopCsv.parm('sAttribute2').set('minimum') tmpRopCsv.parm('sAttribute3').set('maximum') # \u540e\u5904\u7406 tmpRopGeo.moveToGoodPosition() tmpRopCsv.moveToGoodPosition() tmpRopGeo.setColor(tmp_color) tmpNull.setColor(tmp_color) tmpCsvNull.setColor(tmp_color) tmp_file.setColor(tmp_color) elif user_select_type == 2: # \u7f13\u5b58\u6d41\u7a0b # \u521b\u5efaConvert\u8282\u70b9 abcConvert = parNode.createNode(\"convert\") abcConvert.setInput(0,selNode) abcConvert.setPosition((tmp_pos[0],tmp_pos[1]-2)) # \u521b\u5efatransform\u8282\u70b9 abcTrans = parNode.createNode(\"xform\") abcTrans.parm('scale').set(100) abcTrans.setInput(0,abcConvert) abcTrans.setPosition((tmp_pos[0],tmp_pos[1]-4)) # \u521b\u5efaattribwrangle\u8282\u70b9 abcWrangle = parNode.createNode(\"attribwrangle\") abcWrangle.parm('class').set(1) abcWrangleTmp = 's@path = \"/{}/{}\";'.format(res[1] ,res[1] ) abcWrangle.parm('snippet').set(abcWrangleTmp) abcWrangle.setInput(0,abcTrans) abcWrangle.setPosition((tmp_pos[0],tmp_pos[1]-6)) # \u521b\u5efaattribdelete\u8282\u70b9 abcClean = parNode.createNode(\"clean\") abcClean.parm('dodelattribs').set(1) abcClean.parm('dodelgroups').set(1) abcClean.parm('delattribs').set('* ^v ^path ^speed ^vorticity ^mask ^uv') abcClean.parm('delgroups').set('* ^inside ^outside') abcClean.setInput(0,abcWrangle) abcClean.setPosition((tmp_pos[0],tmp_pos[1]-8)) # \u521b\u5efaNULL\u8282\u70b9 abcNodeName = \"ABC_\" + res[1] abcNull = parNode.createNode(\"null\",abcNodeName) abcNull.setInput(0,abcClean) abcNull.setPosition((tmp_pos[0],tmp_pos[1]-10)) # \u521b\u5efaROP \u5199VDB\u7f13\u5b58\u8282\u70b9 abcRopGeo = tmpRop.createNode(\"alembic\",abcNodeName) abcRopGeo.parm(\"trange\").set(1) abcRopGeo.parm(\"use_sop_path\").set(1) abcRopGeo.parm(\"build_from_path\").set(1) abcRopGeo.parm(\"sop_path\").set('../../$OS') abcsopoutput = \"$HIP/Cache/$OS/$OS.\" + cache_type_list[user_select_type] abcRopGeo.parm(\"filename\").set(abcsopoutput) p1 = abcRopGeo.parm(\"filename\") # \u521b\u5efa\u8bfb\u7f13\u5b58\u8282\u70b9 tmp_file = parNode.createNode(\"alembic\") tmp_file.setPosition((tmp_pos[0],tmp_pos[1]-12)) tmp_file.parm(\"fileName\").set(p1) tmp_file.parm(\"missingfile\").set(1) # Csv\u6d41\u7a0b tmpPromote = parNode.createNode(\"attribpromote\") tmpPromote.parm('inname').set('speed vorticity') tmpPromote.parm('outclass').set(0) tmpPromote.parm('method').set(0) tmpPromote.setInput(0,abcTrans) tmpPromote.setPosition((tmp_pos[0]+2,tmp_pos[1]-6)) tmpPromote2 = parNode.createNode(\"attribpromote\") tmpPromote2.parm('inname').set('speed vorticity') tmpPromote2.parm('inclass').set(0) tmpPromote2.parm('method').set(0) tmpPromote2.setInput(0,tmpPromote) tmpPromote2.setPosition((tmp_pos[0]+2,tmp_pos[1]-8)) abcPack = parNode.createNode(\"pack\") abcPack.parm('transfer_attributes').set('speed vorticity') abcPack.setInput(0,tmpPromote2) abcPack.setPosition((tmp_pos[0]+2,tmp_pos[1]-10)) tmpCsvNodeName = abcNodeName + '_iofo' tmpCsvNull = parNode.createNode(\"null\",tmpCsvNodeName) tmpCsvNull.setInput(0,abcPack) tmpCsvNull.setPosition((tmp_pos[0]+2,tmp_pos[1]-12)) tmpRopCsv = tmpRop.createNode('labs::csv_exporter', tmpCsvNodeName) tmpRelCsvPath = '../../'+tmpCsvNodeName tmpRopCsv.parm('export_node').set(tmpRelCsvPath) tmpRopCsv.parm('csv_path').set(\"$HIP/Cache/$OS.csv\") tmpRopCsv.parm('bFilteredExport').set(1) tmpRopCsv.parm('mAttributes').set(2) tmpRopCsv.parm('sAttribute1').set('vorticity') tmpRopCsv.parm('sAttribute2').set('speed') # \u540e\u5904\u7406 abcRopGeo.moveToGoodPosition() tmpRopCsv.moveToGoodPosition() abcRopGeo.setColor(tmp_color) abcNull.setColor(tmp_color) tmpCsvNull.setColor(tmp_color) tmp_file.setColor(tmp_color) else: hou.ui.displayMessage(\"@@@ please select a NODE @@@\")","title":"Code"},{"location":"hou_shelf/","text":"code open hip folder from imp import reload from keysTool import keyTools reload(keyTools) keyTools.openFolder() Batch Load ABC from imp import reload from keysTool import keyTools reload(keyTools) keyTools.abcBatchImport() Merge ABC from imp import reload from keysTool import keyTools reload(keyTools) keyTools.geoMerge() Out Cache from imp import reload from keysTool import keyTools reload(keyTools) keyTools.cacheExport() CleanProj from imp import reload from keysTool import keyTools reload(keyTools) keyTools.cleanProj() PyCharm import hrpyc hrpyc.start_server() print('server is running!')","title":"shelf"},{"location":"hou_shelf/#code","text":"","title":"code"},{"location":"hou_shelf/#open-hip-folder","text":"from imp import reload from keysTool import keyTools reload(keyTools) keyTools.openFolder()","title":"open hip folder"},{"location":"hou_shelf/#batch-load-abc","text":"from imp import reload from keysTool import keyTools reload(keyTools) keyTools.abcBatchImport()","title":"Batch Load ABC"},{"location":"hou_shelf/#merge-abc","text":"from imp import reload from keysTool import keyTools reload(keyTools) keyTools.geoMerge()","title":"Merge ABC"},{"location":"hou_shelf/#out-cache","text":"from imp import reload from keysTool import keyTools reload(keyTools) keyTools.cacheExport()","title":"Out Cache"},{"location":"hou_shelf/#cleanproj","text":"from imp import reload from keysTool import keyTools reload(keyTools) keyTools.cleanProj()","title":"CleanProj"},{"location":"hou_shelf/#pycharm","text":"import hrpyc hrpyc.start_server() print('server is running!')","title":"PyCharm"},{"location":"lakehouse01/","text":"\u70b9\u7684\u5206\u5e03\u7b97\u6cd5 \u5b9e\u73b0\u7ed3\u679c \u7b97\u6cd5 \u70b9\u7684\u4f4d\u7f6eP\u9664\u4ee5x\uff0c\u5047\u8bbex=2 \u7ed3\u679c\u53d6\u6574\uff0c\u53ef\u56db\u820d\u4e94\u5165 \u5f97\u5230\u7684\u7ed3\u679c\u5728\u4e58x \uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6548\u679c // VEX code @P.x = rint(@P.x/2)*2; @P.y = rint(@P.y/3)*3; @P.z = rint(@P.z/2)*2;","title":"01.\u70b9\u7684\u5206\u5e03\u7b97\u6cd5"},{"location":"lakehouse01/#_1","text":"","title":"\u70b9\u7684\u5206\u5e03\u7b97\u6cd5"},{"location":"lakehouse01/#_2","text":"","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"lakehouse01/#_3","text":"\u70b9\u7684\u4f4d\u7f6eP\u9664\u4ee5x\uff0c\u5047\u8bbex=2 \u7ed3\u679c\u53d6\u6574\uff0c\u53ef\u56db\u820d\u4e94\u5165 \u5f97\u5230\u7684\u7ed3\u679c\u5728\u4e58x \uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6548\u679c // VEX code @P.x = rint(@P.x/2)*2; @P.y = rint(@P.y/3)*3; @P.z = rint(@P.z/2)*2;","title":"\u7b97\u6cd5"},{"location":"lakehouse02/","text":"\u83b7\u53d6\u5185\u90e8\u70b9 \u5b9e\u73b0\u7ed3\u679c \u83b7\u53d6\u7ea2\u5708\u5185\u70b9 \u7b97\u6cd5 \u524d\u63d0: \u4e0a\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u70b9\u5728x,z\u8f74\u95f4\u8ddd\u65f62\uff0c\u5728y\u8f74\u95f4\u8ddd\u662f3 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a \u5982\u679c\u67e5\u627e\u8303\u56f4\u662f 2.1 \uff0c\u53ef\u4ee5\u6309\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\u8003\u8651\uff0c\u5982\u679c\u5728houdini\u4f7f\u7528\u70b9\u4e91\u67e5\u627e\uff0c\u56e0\u4e3a\u4f1a\u627e\u5230\u81ea\u8eab\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u70b9\u4f1a\u591a1 \u70b9\u5728\u7acb\u65b9\u4f53\u9876\u70b9\uff0c\u4f1a\u67093\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u8fb9\u4e0a\uff0c\u4f1a\u67094\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u9762\u4e0a\u6216\u8005\u5185\u90e8\uff0c\u4f1a\u67095\u4e2a\u76f8\u90bb\u70b9 \u6839\u636e\u76f8\u90bb\u70b9\u6570\u91cf\uff0c\u5c31\u80fd\u63d0\u53d6\u5230\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u70b9 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a // VEX code // ---------------- // pcopen(int opinput, string Pchannel, vector P, float radius, int maxpoints) // pcnumfound(int handle) \u8fd4\u56de pcopen \u67e5\u8be2\u627e\u5230\u7684\u70b9\u6570\u3002 int handle = pcopen(0, 'P', @P, 2.1, 10); if (pcnumfound(handle)<5) { removepoint(0, @ptnum); } // VEX code // ---------------- // nearpoints(<geometry>geometry, vector pos, float maxdist) \u6240\u6709\u6700\u8fd1\u7684\u70b9\u5217\u8868 int nearpts[] = nearpoints(0,@P,2.1); if (len(nearpts) < 5){ removepoint(0, @ptnum); }","title":"02.\u83b7\u53d6\u5185\u90e8\u70b9"},{"location":"lakehouse02/#_1","text":"","title":"\u83b7\u53d6\u5185\u90e8\u70b9"},{"location":"lakehouse02/#_2","text":"\u83b7\u53d6\u7ea2\u5708\u5185\u70b9","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"lakehouse02/#_3","text":"\u524d\u63d0: \u4e0a\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u70b9\u5728x,z\u8f74\u95f4\u8ddd\u65f62\uff0c\u5728y\u8f74\u95f4\u8ddd\u662f3 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a \u5982\u679c\u67e5\u627e\u8303\u56f4\u662f 2.1 \uff0c\u53ef\u4ee5\u6309\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\u8003\u8651\uff0c\u5982\u679c\u5728houdini\u4f7f\u7528\u70b9\u4e91\u67e5\u627e\uff0c\u56e0\u4e3a\u4f1a\u627e\u5230\u81ea\u8eab\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u70b9\u4f1a\u591a1 \u70b9\u5728\u7acb\u65b9\u4f53\u9876\u70b9\uff0c\u4f1a\u67093\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u8fb9\u4e0a\uff0c\u4f1a\u67094\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u9762\u4e0a\u6216\u8005\u5185\u90e8\uff0c\u4f1a\u67095\u4e2a\u76f8\u90bb\u70b9 \u6839\u636e\u76f8\u90bb\u70b9\u6570\u91cf\uff0c\u5c31\u80fd\u63d0\u53d6\u5230\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u70b9 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a // VEX code // ---------------- // pcopen(int opinput, string Pchannel, vector P, float radius, int maxpoints) // pcnumfound(int handle) \u8fd4\u56de pcopen \u67e5\u8be2\u627e\u5230\u7684\u70b9\u6570\u3002 int handle = pcopen(0, 'P', @P, 2.1, 10); if (pcnumfound(handle)<5) { removepoint(0, @ptnum); } // VEX code // ---------------- // nearpoints(<geometry>geometry, vector pos, float maxdist) \u6240\u6709\u6700\u8fd1\u7684\u70b9\u5217\u8868 int nearpts[] = nearpoints(0,@P,2.1); if (len(nearpts) < 5){ removepoint(0, @ptnum); }","title":"\u7b97\u6cd5"},{"location":"lakehouse03/","text":"\u67e5\u627e\u4efb\u610f\u8f74\u5411\u91cd\u53e0\u9762 \u5b9e\u73b0\u7ed3\u679c \u5220\u9664\u7eff\u8272\u9762\u7684\u91cd\u53e0\u533a\u57df \u7b97\u6cd5 // VEX code // run over:primitives // ---------------- // intersect(<geometry>geometry, vector orig, vector dir, vector pos, vector uvw) // \u6b64\u51fd\u6570\u8ba1\u7b97\u5c04\u7ebf\u4e0e\u9762\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u8fd4\u56de\u6574\u5f62\u503c\uff0c\u627e\u5230\u8fd4\u56de\u9762\u5e8f\u53f7\uff0c\u6ca1\u627e\u5230\u8fd4\u56de-1 int pts[]; vector pos = {0,0,0}; vector pv,uvw; pts = primpoints(0, @primnum); foreach (int pt; pts){ pos += point(0, 'P', pt); } pos /= 4; // \u7528\u6bcf\u4e2a\u9762\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u4f5c\u4e3a\u6295\u5c04\u4f4d\u7f6e\uff0c\u6295\u5c04\u65b9\u5411{0\uff0c-10\uff0c0} int intersection = intersect(1, pos, {0,-10,0}, pv, uvw); if (intersection != -1) { removeprim(0, @primnum, 1); }","title":"03.\u67e5\u627e\u4efb\u610f\u8f74\u5411\u91cd\u53e0\u9762"},{"location":"lakehouse03/#_1","text":"","title":"\u67e5\u627e\u4efb\u610f\u8f74\u5411\u91cd\u53e0\u9762"},{"location":"lakehouse03/#_2","text":"\u5220\u9664\u7eff\u8272\u9762\u7684\u91cd\u53e0\u533a\u57df","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"lakehouse03/#_3","text":"// VEX code // run over:primitives // ---------------- // intersect(<geometry>geometry, vector orig, vector dir, vector pos, vector uvw) // \u6b64\u51fd\u6570\u8ba1\u7b97\u5c04\u7ebf\u4e0e\u9762\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u8fd4\u56de\u6574\u5f62\u503c\uff0c\u627e\u5230\u8fd4\u56de\u9762\u5e8f\u53f7\uff0c\u6ca1\u627e\u5230\u8fd4\u56de-1 int pts[]; vector pos = {0,0,0}; vector pv,uvw; pts = primpoints(0, @primnum); foreach (int pt; pts){ pos += point(0, 'P', pt); } pos /= 4; // \u7528\u6bcf\u4e2a\u9762\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u4f5c\u4e3a\u6295\u5c04\u4f4d\u7f6e\uff0c\u6295\u5c04\u65b9\u5411{0\uff0c-10\uff0c0} int intersection = intersect(1, pos, {0,-10,0}, pv, uvw); if (intersection != -1) { removeprim(0, @primnum, 1); }","title":"\u7b97\u6cd5"},{"location":"lakehouse04/","text":"VEX \u81ea\u5b9a\u4e49\u51fd\u6570 // \u53ef\u4ee5\u5728\u5f53\u524d\u7684wrangle\u8282\u70b9\u53cd\u590d\u8c03\u7528 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570){ return aaa; } // \u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u9762\u4e2d\u70b9\u4f4d\u7f6e\u7684\u51fd\u6570 vector get_prim_center(int prim){ int points[] = primpoints(0, prim); vector pos = {0,0,0}; foreach (int pt; points){ pos += point(0, 'P', pt); } vector center = pos /4; return center; }","title":"04.VEX \u81ea\u5b9a\u4e49\u51fd\u6570"},{"location":"lakehouse04/#vex","text":"// \u53ef\u4ee5\u5728\u5f53\u524d\u7684wrangle\u8282\u70b9\u53cd\u590d\u8c03\u7528 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570){ return aaa; } // \u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u9762\u4e2d\u70b9\u4f4d\u7f6e\u7684\u51fd\u6570 vector get_prim_center(int prim){ int points[] = primpoints(0, prim); vector pos = {0,0,0}; foreach (int pt; points){ pos += point(0, 'P', pt); } vector center = pos /4; return center; }","title":"VEX \u81ea\u5b9a\u4e49\u51fd\u6570"},{"location":"lakehouse05/","text":"\u63d0\u53d6\u6307\u5b9a\u9762 \u5b9e\u73b0\u7ed3\u679c \u6240\u6709\u9762\u5fc5\u987b\u8fde\u63a5\uff0c\u83b7\u53d6\u9634\u5f71\u533a\u57df\u9762 \u7b97\u6cd5 \u7c7b\u4f3c\u4e0a\u9762\u63d0\u53d6\u70b9\u7684\u601d\u8def\uff0c\u627e\u5230\u6bcf\u4e2a\u9762\u7684\u76f8\u90bb\u9762\uff0c\u6839\u636e\u76f8\u90bb\u9762\u4e2a\u6570\u53ef\u63d0\u53d6\u60f3\u8981\u7684\u9762 \u6ce8\u610f\uff1a \u76f8\u90bb\u9762\u662f\u6307\u5171\u4eab\u8fb9\u7684\u9762\uff0c\u53ea\u5171\u4eab\u70b9\u7684\u4e0d\u7b97\u76f8\u90bb\u9762 4\u53f7\u9762\u76f8\u90bb [2 3 5 8] 8\u53f7\u9762\u76f8\u90bb [4 7 9] 11\u53f7\u9762\u76f8\u90bb [9] \u539f\u4f5c\u8005\u5236\u4f5c\u601d\u8def - \u6bd4\u8f83\u7ed5 \u6bcf\u4e2a\u97624\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u53c8\u88ab\u5176\u4ed6\u9762\u5171\u4eab\u3002 \u8fd9\u91cc\u75284\u53f7\u9762\u4e3e\u4f8b 4\u53f7\u9762\u76844\u4e2a\u70b9\u662fa,b,c,d a\u7684\u5171\u4eab\u9762\u662f[3,4,7,8] \uff0cb\u7684\u5171\u4eab\u9762\u662f[4,5,8,9]\uff0cc\u7684\u5171\u4eab\u9762\u662f[1,2,3,4]\uff0cd\u7684\u5171\u4eab\u9762\u662f[2,4,5] \u56e0\u4e3a4\u662f\u81ea\u8eab\u9762\uff0c\u5728\u8fd9\u91cc\u54274\u5254\u9664\uff0c[3,7,8,5,8,9,1,2,3,2,5] \u51fa\u73b02\u6b21\u7684\u9762\u662f[2,3,5,8] \u8fd9\u6837\u5c31\u80fd\u63d0\u53d6\u51fa\u76f8\u90bb\u9762\u7684\u5217\u8868\uff0c\u5982\u679c\u5217\u8868\u53ea\u67091\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u5355\u72ec\u9762 // VEX code // run over:primitives // ---------------- // primpoints(<geometry>geometry, int primnum) \u8fd4\u56de\u9762\u4e0a\u7684\u70b9\u5217\u8868\u3002 // pointprims(<geometry>geometry, int ptnum) \u8fd4\u56de\u70b9\u7684\u9762\u5217\u8868\u3002 int pts[] = primpoints(0, @primnum); int neighs_pcheck[],neighs_all[]; foreach (int pt; pts){ neighs_pcheck = pointprims(0, pt); append(neighs_all, neighs_pcheck); } int max = max(neighs_all); int found; int neighs_prims[]; for (int i = 0; i <= max; ++i){ found = 0; if (i != @primnum) { foreach (int pr; neighs_all){ if (pr == i) { found++; } } if (found > 0 && found%2==0 ) { append(neighs_prims, i); } } } vex polyneighbours \u8fd9\u6837\u53ea\u75281\u884c\u5c31\u80fd\u627e\u5230\u6240\u6709\u76f8\u90bb\u9762\u5217\u8868 // VEX code // run over:primitives // ---------------- // polyneighbours(<geometry>geometry, int primnum) // \u8fd4\u56de\u591a\u8fb9\u5f62\u7684\u76f8\u90bb\u9762\u5e8f\u53f7\u6570\u7ec4\u3002 int neigh_prims[] = polyneighbours(0,@primnum);","title":"05.\u63d0\u53d6\u6307\u5b9a\u9762"},{"location":"lakehouse05/#_1","text":"","title":"\u63d0\u53d6\u6307\u5b9a\u9762"},{"location":"lakehouse05/#_2","text":"\u6240\u6709\u9762\u5fc5\u987b\u8fde\u63a5\uff0c\u83b7\u53d6\u9634\u5f71\u533a\u57df\u9762","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"lakehouse05/#_3","text":"\u7c7b\u4f3c\u4e0a\u9762\u63d0\u53d6\u70b9\u7684\u601d\u8def\uff0c\u627e\u5230\u6bcf\u4e2a\u9762\u7684\u76f8\u90bb\u9762\uff0c\u6839\u636e\u76f8\u90bb\u9762\u4e2a\u6570\u53ef\u63d0\u53d6\u60f3\u8981\u7684\u9762 \u6ce8\u610f\uff1a \u76f8\u90bb\u9762\u662f\u6307\u5171\u4eab\u8fb9\u7684\u9762\uff0c\u53ea\u5171\u4eab\u70b9\u7684\u4e0d\u7b97\u76f8\u90bb\u9762 4\u53f7\u9762\u76f8\u90bb [2 3 5 8] 8\u53f7\u9762\u76f8\u90bb [4 7 9] 11\u53f7\u9762\u76f8\u90bb [9]","title":"\u7b97\u6cd5"},{"location":"lakehouse05/#-","text":"\u6bcf\u4e2a\u97624\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u53c8\u88ab\u5176\u4ed6\u9762\u5171\u4eab\u3002 \u8fd9\u91cc\u75284\u53f7\u9762\u4e3e\u4f8b 4\u53f7\u9762\u76844\u4e2a\u70b9\u662fa,b,c,d a\u7684\u5171\u4eab\u9762\u662f[3,4,7,8] \uff0cb\u7684\u5171\u4eab\u9762\u662f[4,5,8,9]\uff0cc\u7684\u5171\u4eab\u9762\u662f[1,2,3,4]\uff0cd\u7684\u5171\u4eab\u9762\u662f[2,4,5] \u56e0\u4e3a4\u662f\u81ea\u8eab\u9762\uff0c\u5728\u8fd9\u91cc\u54274\u5254\u9664\uff0c[3,7,8,5,8,9,1,2,3,2,5] \u51fa\u73b02\u6b21\u7684\u9762\u662f[2,3,5,8] \u8fd9\u6837\u5c31\u80fd\u63d0\u53d6\u51fa\u76f8\u90bb\u9762\u7684\u5217\u8868\uff0c\u5982\u679c\u5217\u8868\u53ea\u67091\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u5355\u72ec\u9762 // VEX code // run over:primitives // ---------------- // primpoints(<geometry>geometry, int primnum) \u8fd4\u56de\u9762\u4e0a\u7684\u70b9\u5217\u8868\u3002 // pointprims(<geometry>geometry, int ptnum) \u8fd4\u56de\u70b9\u7684\u9762\u5217\u8868\u3002 int pts[] = primpoints(0, @primnum); int neighs_pcheck[],neighs_all[]; foreach (int pt; pts){ neighs_pcheck = pointprims(0, pt); append(neighs_all, neighs_pcheck); } int max = max(neighs_all); int found; int neighs_prims[]; for (int i = 0; i <= max; ++i){ found = 0; if (i != @primnum) { foreach (int pr; neighs_all){ if (pr == i) { found++; } } if (found > 0 && found%2==0 ) { append(neighs_prims, i); } } }","title":"\u539f\u4f5c\u8005\u5236\u4f5c\u601d\u8def - \u6bd4\u8f83\u7ed5"},{"location":"lakehouse05/#vex-polyneighbours","text":"\u8fd9\u6837\u53ea\u75281\u884c\u5c31\u80fd\u627e\u5230\u6240\u6709\u76f8\u90bb\u9762\u5217\u8868 // VEX code // run over:primitives // ---------------- // polyneighbours(<geometry>geometry, int primnum) // \u8fd4\u56de\u591a\u8fb9\u5f62\u7684\u76f8\u90bb\u9762\u5e8f\u53f7\u6570\u7ec4\u3002 int neigh_prims[] = polyneighbours(0,@primnum);","title":"vex polyneighbours"},{"location":"lakehouse06/","text":"\u968f\u673a\u5408\u5e76\u9762 \u5b9e\u73b0\u7ed3\u679c \u8ba9\u6bcf\u4e2a\u9762\u67e5\u627e\u5468\u56f4\u7684\u76f8\u90bb\u9762\uff0c\u7136\u540e\u5408\u5e76\uff0c\u76f4\u5230\u6ca1\u6709\u76f8\u90bb\u9762\u53ef\u4ee5\u5408\u5e76\u3002 \u7b97\u6cd5 \u5982\u679c\u4e0a\u4e00\u6b65\u63d0\u53d6\u9762\u7684\u601d\u8def\u641e\u660e\u767d\uff0c\u8fd9\u91cc\u7684\u7b97\u6cd5\u5c31\u5f88\u7b80\u5355\u4e86\u3002 \u6574\u4f53\u6765\u8bf4\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u5faa\u73af\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\u7ee7\u627f\u4e0a\u4e00\u6b21\u5faa\u73af\u7684\u7ed3\u679c\u3002\u4f7f\u7528 foreach number \u4f5c\u4e3a\u5faa\u73af\u4f53\uff0c\u6ce8\u610f\u8981\u628a begin method \u6539\u4e3a Fetch Feedback \u3002 \u76ee\u7684\u8fd8\u662f\u627e\u5230\u6bcf\u4e2a\u9762\u7684\u76f8\u90bb\u9762\uff0c\u8fd9\u91cc\u8981\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u76f8\u90bb\u9762\uff0c\u7136\u540e\u548c\u81ea\u8eab\u9762\u5408\u6210\u4e00\u4e2a\u9762\uff0c\u540c\u65f6\u7ed3\u675f\u8fd9\u4e00\u6b21\u5faa\u73af\u3002\u4e5f\u5c31\u662f\u53ea\u8981\u6709\u4e00\u4e2a\u9762\u627e\u5230\u4e86\u76f8\u90bb\u9762\uff0c\u5c31\u8df3\u51fa\u672c\u6b21\u5faa\u73af\uff0c\u7ee7\u7eed\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002 \u4f5c\u8005\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e86\u4e0a\u4e00\u6b65\u91cc\u76f8\u5bf9\u590d\u6742\u7684\u7b97\u6cd5\u3002 \u4f5c\u8005\u7b97\u6cd5 // VEX code // run over:detail // ------------------------------------------------------------------- // found_prim \u5728detail wrangle\u4e2d\uff0c\u5982\u679c\u5185\u90e8for\u5faa\u73af\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim>0 // \u5982\u679c\u6240\u6709\u9762\u90fd\u6ca1\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim=0\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u9762\u90fd\u6ca1\u6709\u76f8\u90bb\u9762\u4e86 // \u6211\u4eec\u5c31\u4e0d\u518d\u9700\u8981\u5916\u90e8\u7684foreach \u7ee7\u7eed\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u628astop\u5c5e\u6027\u4f5c\u4e3a\u5faa\u73af\u7ed3\u675f\u6761\u4ef6 int pts[]; int found_prim = 0; int max_nm,found; int neigh_check[],neighs[],neigh_prims[]; for (int pr = 0; pr < nprimitives(0); ++pr){ neigh_check = {}; neighs = {}; pts = primpoints(0, pr); foreach (int pt; pts){ neigh_check = pointprims(0, pt); append(neighs, neigh_check); } max_nm = max(neighs); found = 0; neigh_prims = {}; for (int i = 0; i <= max_nm; ++i){ found = 0; if (pr != i) { foreach (int nm; neighs){ if (i == nm) { found++; } } } if (found > 0 && found%2==0) { append(neigh_prims, i); } } if (len(neigh_prims) > 0) { setprimattrib(0, 'keep', pr, 1, 'set'); setprimattrib(0, 'keep', neigh_prims[0], 1, 'set'); found_prim++; // \u7ed3\u675f\u672c\u6b21\u8fed\u4ee3\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21 break; } } if (found_prim == 0) { i@stop = 1; } \u7b80\u5316\u7248 // VEX code // run over:detail // ------------------------------------------------------------------- // found_prim \u5728detail wrangle\u4e2d\uff0c\u5982\u679c\u5185\u90e8for\u5faa\u73af\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim>0 // \u5982\u679c\u6240\u6709\u9762\u90fd\u6ca1\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim=0\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u9762\u90fd\u6ca1\u6709\u76f8\u90bb\u9762\u4e86 // \u6211\u4eec\u5c31\u4e0d\u518d\u9700\u8981\u5916\u90e8\u7684foreach \u7ee7\u7eed\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u628astop\u5c5e\u6027\u4f5c\u4e3a\u5faa\u73af\u7ed3\u675f\u6761\u4ef6 int found_prim = 0; for (int pr = 0; pr < nprimitives(0); ++pr){ int neigh_prims[] = polyneighbours(0,pr); if (len(neigh_prims) > 0) { setprimattrib(0, 'keep', pr, 1, 'set'); setprimattrib(0, 'keep', neigh_prims[0], 1, 'set'); found_prim++; break; } } if (found_prim == 0) { i@stop = 1; }","title":"06.\u968f\u673a\u5408\u5e76\u9762"},{"location":"lakehouse06/#_1","text":"","title":"\u968f\u673a\u5408\u5e76\u9762"},{"location":"lakehouse06/#_2","text":"\u8ba9\u6bcf\u4e2a\u9762\u67e5\u627e\u5468\u56f4\u7684\u76f8\u90bb\u9762\uff0c\u7136\u540e\u5408\u5e76\uff0c\u76f4\u5230\u6ca1\u6709\u76f8\u90bb\u9762\u53ef\u4ee5\u5408\u5e76\u3002","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"lakehouse06/#_3","text":"\u5982\u679c\u4e0a\u4e00\u6b65\u63d0\u53d6\u9762\u7684\u601d\u8def\u641e\u660e\u767d\uff0c\u8fd9\u91cc\u7684\u7b97\u6cd5\u5c31\u5f88\u7b80\u5355\u4e86\u3002 \u6574\u4f53\u6765\u8bf4\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u5faa\u73af\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\u7ee7\u627f\u4e0a\u4e00\u6b21\u5faa\u73af\u7684\u7ed3\u679c\u3002\u4f7f\u7528 foreach number \u4f5c\u4e3a\u5faa\u73af\u4f53\uff0c\u6ce8\u610f\u8981\u628a begin method \u6539\u4e3a Fetch Feedback \u3002 \u76ee\u7684\u8fd8\u662f\u627e\u5230\u6bcf\u4e2a\u9762\u7684\u76f8\u90bb\u9762\uff0c\u8fd9\u91cc\u8981\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u76f8\u90bb\u9762\uff0c\u7136\u540e\u548c\u81ea\u8eab\u9762\u5408\u6210\u4e00\u4e2a\u9762\uff0c\u540c\u65f6\u7ed3\u675f\u8fd9\u4e00\u6b21\u5faa\u73af\u3002\u4e5f\u5c31\u662f\u53ea\u8981\u6709\u4e00\u4e2a\u9762\u627e\u5230\u4e86\u76f8\u90bb\u9762\uff0c\u5c31\u8df3\u51fa\u672c\u6b21\u5faa\u73af\uff0c\u7ee7\u7eed\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002 \u4f5c\u8005\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e86\u4e0a\u4e00\u6b65\u91cc\u76f8\u5bf9\u590d\u6742\u7684\u7b97\u6cd5\u3002","title":"\u7b97\u6cd5"},{"location":"lakehouse06/#_4","text":"// VEX code // run over:detail // ------------------------------------------------------------------- // found_prim \u5728detail wrangle\u4e2d\uff0c\u5982\u679c\u5185\u90e8for\u5faa\u73af\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim>0 // \u5982\u679c\u6240\u6709\u9762\u90fd\u6ca1\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim=0\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u9762\u90fd\u6ca1\u6709\u76f8\u90bb\u9762\u4e86 // \u6211\u4eec\u5c31\u4e0d\u518d\u9700\u8981\u5916\u90e8\u7684foreach \u7ee7\u7eed\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u628astop\u5c5e\u6027\u4f5c\u4e3a\u5faa\u73af\u7ed3\u675f\u6761\u4ef6 int pts[]; int found_prim = 0; int max_nm,found; int neigh_check[],neighs[],neigh_prims[]; for (int pr = 0; pr < nprimitives(0); ++pr){ neigh_check = {}; neighs = {}; pts = primpoints(0, pr); foreach (int pt; pts){ neigh_check = pointprims(0, pt); append(neighs, neigh_check); } max_nm = max(neighs); found = 0; neigh_prims = {}; for (int i = 0; i <= max_nm; ++i){ found = 0; if (pr != i) { foreach (int nm; neighs){ if (i == nm) { found++; } } } if (found > 0 && found%2==0) { append(neigh_prims, i); } } if (len(neigh_prims) > 0) { setprimattrib(0, 'keep', pr, 1, 'set'); setprimattrib(0, 'keep', neigh_prims[0], 1, 'set'); found_prim++; // \u7ed3\u675f\u672c\u6b21\u8fed\u4ee3\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21 break; } } if (found_prim == 0) { i@stop = 1; }","title":"\u4f5c\u8005\u7b97\u6cd5"},{"location":"lakehouse06/#_5","text":"// VEX code // run over:detail // ------------------------------------------------------------------- // found_prim \u5728detail wrangle\u4e2d\uff0c\u5982\u679c\u5185\u90e8for\u5faa\u73af\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim>0 // \u5982\u679c\u6240\u6709\u9762\u90fd\u6ca1\u627e\u5230\u76f8\u90bb\u9762\uff0cfound_prim=0\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u9762\u90fd\u6ca1\u6709\u76f8\u90bb\u9762\u4e86 // \u6211\u4eec\u5c31\u4e0d\u518d\u9700\u8981\u5916\u90e8\u7684foreach \u7ee7\u7eed\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u628astop\u5c5e\u6027\u4f5c\u4e3a\u5faa\u73af\u7ed3\u675f\u6761\u4ef6 int found_prim = 0; for (int pr = 0; pr < nprimitives(0); ++pr){ int neigh_prims[] = polyneighbours(0,pr); if (len(neigh_prims) > 0) { setprimattrib(0, 'keep', pr, 1, 'set'); setprimattrib(0, 'keep', neigh_prims[0], 1, 'set'); found_prim++; break; } } if (found_prim == 0) { i@stop = 1; }","title":"\u7b80\u5316\u7248"},{"location":"maya_FPtools/","text":"\u846b\u82a6\u5a03\u5de5\u5177\u4f7f\u7528 \u5b89\u88c5 \u590d\u5236 updateFPTools.py \u5230 C:\\Users\\Administrator\\Documents\\maya\\scripts updateFPTools.py \u4efb\u610f\u5de5\u5177\u67b6\u4e0a\u6dfb\u52a0\u4e34\u65f6\u5de5\u5177 python import updateFPTools reload(updateFPTools) updateFPTools.update_tools() \u6dfb\u52a0\u5b8c\u6210\u540e\u70b9\u51fb\u8be5\u5de5\u5177\uff0cmaya\u4f1a\u91cd\u542f\uff0c\u540c\u65f6\u4f1a\u66f4\u65b0\u5de5\u5177\u67b6\u548cpython\u4ee3\u7801 \u52a0\u8f7d\u5de5\u5177\u67b6(\u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u6709\u8be5\u5de5\u5177\u67b6\uff0c\u53ef\u7701\u7565\u8fd9\u4e00\u6b65\uff0c\u91cd\u542fmaya\u539a\u5c31\u53ef\u4f7f\u7528) \u66f4\u65b0 \u5b8c\u6210\u5b89\u88c5\u4ee5\u540e\uff0c\u70b9\u51fb\u5b9d\u846b\u82a6\uff0cmaya\u91cd\u542f\u66f4\u65b0","title":"\u846b\u82a6\u5a03\u5de5\u5177"},{"location":"maya_FPtools/#_1","text":"","title":"\u846b\u82a6\u5a03\u5de5\u5177\u4f7f\u7528"},{"location":"maya_FPtools/#_2","text":"\u590d\u5236 updateFPTools.py \u5230 C:\\Users\\Administrator\\Documents\\maya\\scripts updateFPTools.py \u4efb\u610f\u5de5\u5177\u67b6\u4e0a\u6dfb\u52a0\u4e34\u65f6\u5de5\u5177 python import updateFPTools reload(updateFPTools) updateFPTools.update_tools() \u6dfb\u52a0\u5b8c\u6210\u540e\u70b9\u51fb\u8be5\u5de5\u5177\uff0cmaya\u4f1a\u91cd\u542f\uff0c\u540c\u65f6\u4f1a\u66f4\u65b0\u5de5\u5177\u67b6\u548cpython\u4ee3\u7801 \u52a0\u8f7d\u5de5\u5177\u67b6(\u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u6709\u8be5\u5de5\u5177\u67b6\uff0c\u53ef\u7701\u7565\u8fd9\u4e00\u6b65\uff0c\u91cd\u542fmaya\u539a\u5c31\u53ef\u4f7f\u7528)","title":"\u5b89\u88c5"},{"location":"maya_FPtools/#_3","text":"\u5b8c\u6210\u5b89\u88c5\u4ee5\u540e\uff0c\u70b9\u51fb\u5b9d\u846b\u82a6\uff0cmaya\u91cd\u542f\u66f4\u65b0","title":"\u66f4\u65b0"},{"location":"maya_py/","text":"Code # ..\\Documents\\maya\\scripts import maya.cmds as cmds import os def test(): sel_list = cmds.ls(sl=1) shapes = cmds.listRelatives(sel_list[0]) for node in shapes: name = '{}|{}'.format(sel_list[0],node) if 'rig' in node: cmds.hide( name) def make_folder(dir): folder = os.path.exists(dir) if folder: pass else: os.makedirs(dir) return dir def abcExport(dir,object,f1=1,f2=1): print('start export {}'.format(object)) shapes = cmds.listRelatives(object) # for node in shapes: # name = '{}|{}'.format(object,node) # if ':' in node: # current_name = node.split(':')[-1] # if 'rig' in current_name: # cmds.hide( name) # else: # if 'rig' in node: # cmds.hide( name) if ':' in object: for node in shapes: full_name = '{}|{}'.format(object,node) current_name = node.split(':')[-1] if 'rig' in current_name: cmds.hide(full_name) name = object.split(':')[-1] export_path = os.path.join(dir,'{}.abc'.format(name)) command = \"-frameRange {} {} -uvWrite -worldSpace -writeVisibility -writeUVSets -dataFormat hdf -root |{} -file {}\".format(f1,f2,object,export_path) cmds.AbcExport(j=command) for node in shapes: full_name = '{}|{}'.format(object,node) cmds.unhide(full_name) else: for node in shapes: full_name = '{}|{}'.format(object,node) if 'rig' in node: cmds.hide( full_name) export_path = os.path.join(dir,'{}.abc'.format(object)) command = \"-frameRange {} {} -uvWrite -worldSpace -writeVisibility -writeUVSets -dataFormat hdf -root |{} -file {}\".format(f1,f2,object,export_path) cmds.AbcExport(j=command) for node in shapes: full_name = '{}|{}'.format(object,node) cmds.unhide(full_name) def abcBatchExport(): file_path = cmds.file(q=True, sn=True) file_dir = os.path.dirname(file_path) file_name = os.path.basename(file_path) raw_name, extension = os.path.splitext(file_name) cache_dir = os.path.join(file_dir,'cache') make_folder(cache_dir) shot_cache_dir = os.path.join(cache_dir,raw_name) make_folder(shot_cache_dir) sel_list = cmds.ls(sl=1) # ,sn=True for sel in sel_list: abcExport(shot_cache_dir,sel) def abcAniBatchExport(): file_path = cmds.file(q=True, sn=True) file_dir = os.path.dirname(file_path) file_name = os.path.basename(file_path) raw_name, extension = os.path.splitext(file_name) cache_dir = os.path.join(file_dir,'cache') make_folder(cache_dir) shot_cache_dir = os.path.join(cache_dir,raw_name) make_folder(shot_cache_dir) f1 = cmds.playbackOptions(q=True, min=True) f2 = cmds.playbackOptions(q=True, max=True) sel_list = cmds.ls(sl=1) # ,sn=True for sel in sel_list: abcExport(shot_cache_dir,sel,f1,f2)","title":"pyabc_code"},{"location":"maya_py/#code","text":"# ..\\Documents\\maya\\scripts import maya.cmds as cmds import os def test(): sel_list = cmds.ls(sl=1) shapes = cmds.listRelatives(sel_list[0]) for node in shapes: name = '{}|{}'.format(sel_list[0],node) if 'rig' in node: cmds.hide( name) def make_folder(dir): folder = os.path.exists(dir) if folder: pass else: os.makedirs(dir) return dir def abcExport(dir,object,f1=1,f2=1): print('start export {}'.format(object)) shapes = cmds.listRelatives(object) # for node in shapes: # name = '{}|{}'.format(object,node) # if ':' in node: # current_name = node.split(':')[-1] # if 'rig' in current_name: # cmds.hide( name) # else: # if 'rig' in node: # cmds.hide( name) if ':' in object: for node in shapes: full_name = '{}|{}'.format(object,node) current_name = node.split(':')[-1] if 'rig' in current_name: cmds.hide(full_name) name = object.split(':')[-1] export_path = os.path.join(dir,'{}.abc'.format(name)) command = \"-frameRange {} {} -uvWrite -worldSpace -writeVisibility -writeUVSets -dataFormat hdf -root |{} -file {}\".format(f1,f2,object,export_path) cmds.AbcExport(j=command) for node in shapes: full_name = '{}|{}'.format(object,node) cmds.unhide(full_name) else: for node in shapes: full_name = '{}|{}'.format(object,node) if 'rig' in node: cmds.hide( full_name) export_path = os.path.join(dir,'{}.abc'.format(object)) command = \"-frameRange {} {} -uvWrite -worldSpace -writeVisibility -writeUVSets -dataFormat hdf -root |{} -file {}\".format(f1,f2,object,export_path) cmds.AbcExport(j=command) for node in shapes: full_name = '{}|{}'.format(object,node) cmds.unhide(full_name) def abcBatchExport(): file_path = cmds.file(q=True, sn=True) file_dir = os.path.dirname(file_path) file_name = os.path.basename(file_path) raw_name, extension = os.path.splitext(file_name) cache_dir = os.path.join(file_dir,'cache') make_folder(cache_dir) shot_cache_dir = os.path.join(cache_dir,raw_name) make_folder(shot_cache_dir) sel_list = cmds.ls(sl=1) # ,sn=True for sel in sel_list: abcExport(shot_cache_dir,sel) def abcAniBatchExport(): file_path = cmds.file(q=True, sn=True) file_dir = os.path.dirname(file_path) file_name = os.path.basename(file_path) raw_name, extension = os.path.splitext(file_name) cache_dir = os.path.join(file_dir,'cache') make_folder(cache_dir) shot_cache_dir = os.path.join(cache_dir,raw_name) make_folder(shot_cache_dir) f1 = cmds.playbackOptions(q=True, min=True) f2 = cmds.playbackOptions(q=True, max=True) sel_list = cmds.ls(sl=1) # ,sn=True for sel in sel_list: abcExport(shot_cache_dir,sel,f1,f2)","title":"Code"},{"location":"maya_shelf/","text":"code abc\u5355\u5e27\u5bfc\u51fa import keyMTools reload(keyMTools) keyMTools.abcBatchExport() abc\u52a8\u753b\u5bfc\u51fa import keyMTools reload(keyMTools) keyMTools.abcAniBatchExport()","title":"shelf"},{"location":"maya_shelf/#code","text":"","title":"code"},{"location":"maya_shelf/#abc","text":"import keyMTools reload(keyMTools) keyMTools.abcBatchExport()","title":"abc\u5355\u5e27\u5bfc\u51fa"},{"location":"maya_shelf/#abc_1","text":"import keyMTools reload(keyMTools) keyMTools.abcAniBatchExport()","title":"abc\u52a8\u753b\u5bfc\u51fa"}]}