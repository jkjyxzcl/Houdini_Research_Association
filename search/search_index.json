{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u70b9\u7684\u5206\u5e03\u7b97\u6cd5 \u5b9e\u73b0\u7ed3\u679c \u7b97\u6cd5 \u70b9\u7684\u4f4d\u7f6eP\u9664\u4ee5x\uff0c\u5047\u8bbex=2 \u7ed3\u679c\u53d6\u6574\uff0c\u53ef\u56db\u820d\u4e94\u5165 \u5f97\u5230\u7684\u7ed3\u679c\u5728\u4e58x \uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6548\u679c // VEX code @P.x = rint(@P.x/2)*2; @P.y = rint(@P.y/3)*3; @P.z = rint(@P.z/2)*2; \u83b7\u53d6\u5185\u90e8\u70b9 \u5b9e\u73b0\u7ed3\u679c \u83b7\u53d6\u7ea2\u5708\u5185\u70b9 \u7b97\u6cd5 \u524d\u63d0: \u4e0a\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u70b9\u5728x,z\u8f74\u95f4\u8ddd\u65f62\uff0c\u5728y\u8f74\u95f4\u8ddd\u662f3 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a \u5982\u679c\u67e5\u627e\u8303\u56f4\u662f 2.1 \uff0c\u53ef\u4ee5\u6309\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\u8003\u8651\uff0c\u5982\u679c\u5728houdini\u4f7f\u7528\u70b9\u4e91\u67e5\u627e\uff0c\u56e0\u4e3a\u4f1a\u627e\u5230\u81ea\u8eab\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u70b9\u4f1a\u591a1 \u70b9\u5728\u7acb\u65b9\u4f53\u9876\u70b9\uff0c\u4f1a\u67093\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u8fb9\u4e0a\uff0c\u4f1a\u67094\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u9762\u4e0a\u6216\u8005\u5185\u90e8\uff0c\u4f1a\u67095\u4e2a\u76f8\u90bb\u70b9 \u6839\u636e\u76f8\u90bb\u70b9\u6570\u91cf\uff0c\u5c31\u80fd\u63d0\u53d6\u5230\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u70b9 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a // VEX code // ---------------- // pcopen(int opinput, string Pchannel, vector P, float radius, int maxpoints) // pcnumfound(int handle) \u8fd4\u56de pcopen \u67e5\u8be2\u627e\u5230\u7684\u70b9\u6570\u3002 int handle = pcopen(0, 'P', @P, 2.1, 10); if (pcnumfound(handle)<5) { removepoint(0, @ptnum); } // VEX code // ---------------- // nearpoints(<geometry>geometry, vector pos, float maxdist) \u6240\u6709\u6700\u8fd1\u7684\u70b9\u5217\u8868 int nearpts[] = nearpoints(0,@P,2.1); if (len(nearpts) < 5){ removepoint(0, @ptnum); } \u67e5\u627e\u4efb\u610f\u8f74\u5411\u91cd\u53e0\u9762 \u5b9e\u73b0\u7ed3\u679c \u5220\u9664\u7eff\u8272\u9762\u7684\u91cd\u53e0\u533a\u57df \u7b97\u6cd5 // VEX code // run over:primitives // ---------------- // intersect(<geometry>geometry, vector orig, vector dir, vector pos, vector uvw) // \u6b64\u51fd\u6570\u8ba1\u7b97\u5c04\u7ebf\u4e0e\u9762\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u8fd4\u56de\u6574\u5f62\u503c\uff0c\u627e\u5230\u8fd4\u56de\u9762\u5e8f\u53f7\uff0c\u6ca1\u627e\u5230\u8fd4\u56de-1 int pts[]; vector pos = {0,0,0}; vector pv,uvw; pts = primpoints(0, @primnum); foreach (int pt; pts){ pos += point(0, 'P', pt); } pos /= 4; // \u7528\u6bcf\u4e2a\u9762\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u4f5c\u4e3a\u6295\u5c04\u4f4d\u7f6e\uff0c\u6295\u5c04\u65b9\u5411{0\uff0c-10\uff0c0} int intersection = intersect(1, pos, {0,-10,0}, pv, uvw); if (intersection != -1) { removeprim(0, @primnum, 1); } VEX \u81ea\u5b9a\u4e49\u51fd\u6570 // \u53ef\u4ee5\u5728\u5f53\u524d\u7684wrangle\u8282\u70b9\u53cd\u590d\u8c03\u7528 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570){ return aaa; } // \u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u9762\u4e2d\u70b9\u4f4d\u7f6e\u7684\u51fd\u6570 vector get_prim_center(int prim){ int points[] = primpoints(0, prim); vector pos = {0,0,0}; foreach (int pt; points){ pos += point(0, 'P', pt); } vector center = pos /4; return center; } \u63d0\u53d6\u6307\u5b9a\u9762 \u5b9e\u73b0\u7ed3\u679c \u6240\u6709\u9762\u5fc5\u987b\u8fde\u63a5\uff0c\u83b7\u53d6\u9634\u5f71\u533a\u57df\u9762 \u7b97\u6cd5 \u7c7b\u4f3c\u4e0a\u9762\u63d0\u53d6\u70b9\u7684\u601d\u8def\uff0c\u627e\u5230\u6bcf\u4e2a\u9762\u7684\u76f8\u90bb\u9762\uff0c\u6839\u636e\u76f8\u90bb\u9762\u4e2a\u6570\u53ef\u63d0\u53d6\u60f3\u8981\u7684\u9762 \u6ce8\u610f\uff1a \u76f8\u90bb\u9762\u662f\u6307\u5171\u4eab\u8fb9\u7684\u9762\uff0c\u53ea\u5171\u4eab\u70b9\u7684\u4e0d\u7b97\u76f8\u90bb\u9762 4\u53f7\u9762\u76f8\u90bb [2 3 5 8] 8\u53f7\u9762\u76f8\u90bb [4 7 9] 11\u53f7\u9762\u76f8\u90bb [9] \u539f\u4f5c\u8005\u5236\u4f5c\u601d\u8def - \u6bd4\u8f83\u7ed5 \u6bcf\u4e2a\u97624\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u53c8\u88ab\u5176\u4ed6\u9762\u5171\u4eab\u3002 \u8fd9\u91cc\u75284\u53f7\u9762\u4e3e\u4f8b 4\u53f7\u9762\u76844\u4e2a\u70b9\u662fa,b,c,d a\u7684\u5171\u4eab\u9762\u662f[3,4,7,8] \uff0cb\u7684\u5171\u4eab\u9762\u662f[4,5,8,9]\uff0cc\u7684\u5171\u4eab\u9762\u662f[1,2,3,4]\uff0cd\u7684\u5171\u4eab\u9762\u662f[2,4,5] \u56e0\u4e3a4\u662f\u81ea\u8eab\u9762\uff0c\u5728\u8fd9\u91cc\u54274\u5254\u9664\uff0c[3,7,8,5,8,9,1,2,3,2,5] \u51fa\u73b02\u6b21\u7684\u9762\u662f[2,3,5,8] \u8fd9\u6837\u5c31\u80fd\u63d0\u53d6\u51fa\u76f8\u90bb\u9762\u7684\u5217\u8868\uff0c\u5982\u679c\u5217\u8868\u53ea\u67091\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u5355\u72ec\u9762 // VEX code // run over:primitives // ---------------- // primpoints(<geometry>geometry, int primnum) \u8fd4\u56de\u9762\u4e0a\u7684\u70b9\u5217\u8868\u3002 // pointprims(<geometry>geometry, int ptnum) \u8fd4\u56de\u70b9\u7684\u9762\u5217\u8868\u3002 int pts[] = primpoints(0, @primnum); int neighs_pcheck[],neighs_all[]; foreach (int pt; pts){ neighs_pcheck = pointprims(0, pt); append(neighs_all, neighs_pcheck); } int max = max(neighs_all); int found; int neighs_prims[]; for (int i = 0; i <= max; ++i){ found = 0; if (i != @primnum) { foreach (int pr; neighs_all){ if (pr == i) { found++; } } if (found > 0 && found%2==0 ) { append(neighs_prims, i); } } } vex polyneighbours \u8fd9\u6837\u53ea\u75281\u884c\u5c31\u80fd\u627e\u5230\u6240\u6709\u76f8\u90bb\u9762\u5217\u8868 // VEX code // run over:primitives // ---------------- // polyneighbours(<geometry>geometry, int primnum) // \u8fd4\u56de\u591a\u8fb9\u5f62\u7684\u76f8\u90bb\u9762\u5e8f\u53f7\u6570\u7ec4\u3002 int neigh_prims[] = polyneighbours(0,@primnum);","title":"\u9996\u9875"},{"location":"#_1","text":"","title":"\u70b9\u7684\u5206\u5e03\u7b97\u6cd5"},{"location":"#_2","text":"","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"#_3","text":"\u70b9\u7684\u4f4d\u7f6eP\u9664\u4ee5x\uff0c\u5047\u8bbex=2 \u7ed3\u679c\u53d6\u6574\uff0c\u53ef\u56db\u820d\u4e94\u5165 \u5f97\u5230\u7684\u7ed3\u679c\u5728\u4e58x \uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6548\u679c // VEX code @P.x = rint(@P.x/2)*2; @P.y = rint(@P.y/3)*3; @P.z = rint(@P.z/2)*2;","title":"\u7b97\u6cd5"},{"location":"#_4","text":"","title":"\u83b7\u53d6\u5185\u90e8\u70b9"},{"location":"#_5","text":"\u83b7\u53d6\u7ea2\u5708\u5185\u70b9","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"#_6","text":"\u524d\u63d0: \u4e0a\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u70b9\u5728x,z\u8f74\u95f4\u8ddd\u65f62\uff0c\u5728y\u8f74\u95f4\u8ddd\u662f3 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a \u5982\u679c\u67e5\u627e\u8303\u56f4\u662f 2.1 \uff0c\u53ef\u4ee5\u6309\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\u8003\u8651\uff0c\u5982\u679c\u5728houdini\u4f7f\u7528\u70b9\u4e91\u67e5\u627e\uff0c\u56e0\u4e3a\u4f1a\u627e\u5230\u81ea\u8eab\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u70b9\u4f1a\u591a1 \u70b9\u5728\u7acb\u65b9\u4f53\u9876\u70b9\uff0c\u4f1a\u67093\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u8fb9\u4e0a\uff0c\u4f1a\u67094\u4e2a\u76f8\u90bb\u70b9 \u70b9\u5728\u7acb\u65b9\u4f53\u9762\u4e0a\u6216\u8005\u5185\u90e8\uff0c\u4f1a\u67095\u4e2a\u76f8\u90bb\u70b9 \u6839\u636e\u76f8\u90bb\u70b9\u6570\u91cf\uff0c\u5c31\u80fd\u63d0\u53d6\u5230\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u70b9 \u56fe\u4e2d\u53cd\u5e94\u7684\u662f\u70b9\u4e91\u67e5\u627e\u7ed3\u679c\uff0c\u6240\u4ee5\u663e\u793a\u70b9\u4f1a\u591a\u4e00\u4e2a // VEX code // ---------------- // pcopen(int opinput, string Pchannel, vector P, float radius, int maxpoints) // pcnumfound(int handle) \u8fd4\u56de pcopen \u67e5\u8be2\u627e\u5230\u7684\u70b9\u6570\u3002 int handle = pcopen(0, 'P', @P, 2.1, 10); if (pcnumfound(handle)<5) { removepoint(0, @ptnum); } // VEX code // ---------------- // nearpoints(<geometry>geometry, vector pos, float maxdist) \u6240\u6709\u6700\u8fd1\u7684\u70b9\u5217\u8868 int nearpts[] = nearpoints(0,@P,2.1); if (len(nearpts) < 5){ removepoint(0, @ptnum); }","title":"\u7b97\u6cd5"},{"location":"#_7","text":"","title":"\u67e5\u627e\u4efb\u610f\u8f74\u5411\u91cd\u53e0\u9762"},{"location":"#_8","text":"\u5220\u9664\u7eff\u8272\u9762\u7684\u91cd\u53e0\u533a\u57df","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"#_9","text":"// VEX code // run over:primitives // ---------------- // intersect(<geometry>geometry, vector orig, vector dir, vector pos, vector uvw) // \u6b64\u51fd\u6570\u8ba1\u7b97\u5c04\u7ebf\u4e0e\u9762\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u8fd4\u56de\u6574\u5f62\u503c\uff0c\u627e\u5230\u8fd4\u56de\u9762\u5e8f\u53f7\uff0c\u6ca1\u627e\u5230\u8fd4\u56de-1 int pts[]; vector pos = {0,0,0}; vector pv,uvw; pts = primpoints(0, @primnum); foreach (int pt; pts){ pos += point(0, 'P', pt); } pos /= 4; // \u7528\u6bcf\u4e2a\u9762\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u4f5c\u4e3a\u6295\u5c04\u4f4d\u7f6e\uff0c\u6295\u5c04\u65b9\u5411{0\uff0c-10\uff0c0} int intersection = intersect(1, pos, {0,-10,0}, pv, uvw); if (intersection != -1) { removeprim(0, @primnum, 1); }","title":"\u7b97\u6cd5"},{"location":"#vex","text":"// \u53ef\u4ee5\u5728\u5f53\u524d\u7684wrangle\u8282\u70b9\u53cd\u590d\u8c03\u7528 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570){ return aaa; } // \u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u9762\u4e2d\u70b9\u4f4d\u7f6e\u7684\u51fd\u6570 vector get_prim_center(int prim){ int points[] = primpoints(0, prim); vector pos = {0,0,0}; foreach (int pt; points){ pos += point(0, 'P', pt); } vector center = pos /4; return center; }","title":"VEX \u81ea\u5b9a\u4e49\u51fd\u6570"},{"location":"#_10","text":"","title":"\u63d0\u53d6\u6307\u5b9a\u9762"},{"location":"#_11","text":"\u6240\u6709\u9762\u5fc5\u987b\u8fde\u63a5\uff0c\u83b7\u53d6\u9634\u5f71\u533a\u57df\u9762","title":"\u5b9e\u73b0\u7ed3\u679c"},{"location":"#_12","text":"\u7c7b\u4f3c\u4e0a\u9762\u63d0\u53d6\u70b9\u7684\u601d\u8def\uff0c\u627e\u5230\u6bcf\u4e2a\u9762\u7684\u76f8\u90bb\u9762\uff0c\u6839\u636e\u76f8\u90bb\u9762\u4e2a\u6570\u53ef\u63d0\u53d6\u60f3\u8981\u7684\u9762 \u6ce8\u610f\uff1a \u76f8\u90bb\u9762\u662f\u6307\u5171\u4eab\u8fb9\u7684\u9762\uff0c\u53ea\u5171\u4eab\u70b9\u7684\u4e0d\u7b97\u76f8\u90bb\u9762 4\u53f7\u9762\u76f8\u90bb [2 3 5 8] 8\u53f7\u9762\u76f8\u90bb [4 7 9] 11\u53f7\u9762\u76f8\u90bb [9]","title":"\u7b97\u6cd5"},{"location":"#-","text":"\u6bcf\u4e2a\u97624\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u53c8\u88ab\u5176\u4ed6\u9762\u5171\u4eab\u3002 \u8fd9\u91cc\u75284\u53f7\u9762\u4e3e\u4f8b 4\u53f7\u9762\u76844\u4e2a\u70b9\u662fa,b,c,d a\u7684\u5171\u4eab\u9762\u662f[3,4,7,8] \uff0cb\u7684\u5171\u4eab\u9762\u662f[4,5,8,9]\uff0cc\u7684\u5171\u4eab\u9762\u662f[1,2,3,4]\uff0cd\u7684\u5171\u4eab\u9762\u662f[2,4,5] \u56e0\u4e3a4\u662f\u81ea\u8eab\u9762\uff0c\u5728\u8fd9\u91cc\u54274\u5254\u9664\uff0c[3,7,8,5,8,9,1,2,3,2,5] \u51fa\u73b02\u6b21\u7684\u9762\u662f[2,3,5,8] \u8fd9\u6837\u5c31\u80fd\u63d0\u53d6\u51fa\u76f8\u90bb\u9762\u7684\u5217\u8868\uff0c\u5982\u679c\u5217\u8868\u53ea\u67091\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u5355\u72ec\u9762 // VEX code // run over:primitives // ---------------- // primpoints(<geometry>geometry, int primnum) \u8fd4\u56de\u9762\u4e0a\u7684\u70b9\u5217\u8868\u3002 // pointprims(<geometry>geometry, int ptnum) \u8fd4\u56de\u70b9\u7684\u9762\u5217\u8868\u3002 int pts[] = primpoints(0, @primnum); int neighs_pcheck[],neighs_all[]; foreach (int pt; pts){ neighs_pcheck = pointprims(0, pt); append(neighs_all, neighs_pcheck); } int max = max(neighs_all); int found; int neighs_prims[]; for (int i = 0; i <= max; ++i){ found = 0; if (i != @primnum) { foreach (int pr; neighs_all){ if (pr == i) { found++; } } if (found > 0 && found%2==0 ) { append(neighs_prims, i); } } }","title":"\u539f\u4f5c\u8005\u5236\u4f5c\u601d\u8def - \u6bd4\u8f83\u7ed5"},{"location":"#vex-polyneighbours","text":"\u8fd9\u6837\u53ea\u75281\u884c\u5c31\u80fd\u627e\u5230\u6240\u6709\u76f8\u90bb\u9762\u5217\u8868 // VEX code // run over:primitives // ---------------- // polyneighbours(<geometry>geometry, int primnum) // \u8fd4\u56de\u591a\u8fb9\u5f62\u7684\u76f8\u90bb\u9762\u5e8f\u53f7\u6570\u7ec4\u3002 int neigh_prims[] = polyneighbours(0,@primnum);","title":"vex polyneighbours"},{"location":"about/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u6d4b\u8bd5\u9875"},{"location":"about/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"about/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"about/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}